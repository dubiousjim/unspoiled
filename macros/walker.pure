/* syntax walker

   Copyright (c) 2012 by Dubiousjim <dubiousjim@gmail.com>.
   BSD License at https://github.com/dubiousjim/unspoiled/blob/master/LICENSE

   `walker` is a combination of a Reader monad and Writer monad that walks and converts a Pure syntax tree.

    The Reader part consists of a list of symbols and/or
(symbol-->expression)s. This is automatically pruned as walker encounters any
binding constructions that shadow symbols in the list.

    The Writer part consists of a `state` argument that can be whatever you want.

    The Converter function is passed each atomic Pure expression in the tree.
This function is also passed the current Reader and Writer states, and two
boolean values:

    * q is 1 if the current expression is in a quotation context
    * t is 1 if the current expression is in a tail position for the initial
      expression being walked

    The format in which arguments are passed is:

    Converter q t watched_free_symbols write_state (current_atom:arguments)

When current_atom is a head, arguments will be the list of (not-yet-processed)
expressions to which it is applied. Otherwise it will be [].

The Converter should return a value of the form:

    Possibly_New_Writer_State:Possibly_New_Expression:Possibly_Different_Arguments

You can add or subtract elements to Possibly_Different_Arguments, and this
list will be walked next. If you want to insert new expressions that *aren't* to be
walked, just return a complex expression for Possibly_New_Expression. Don't append
an argument list to a current_atom that was not passed to Converter
as a head. (Though as just mentioned, you can return a complex expression for
Possibly_New_Expression.) Also, there is no facility for wholly excising the
current position from the syntax tree; though when it's a head, you can fill it
with the __id__ macro. (Or the id function, of course, but that will only be
reduced at runtime.)

When t was 1, the Converter should additionally return
a macro or expression to wrap around the whole tail expression (the head
together with all its arguments), so then the return value has the form:

    Possibly_New_Writer_State:Wrapper:Possibly_New_Expression:Possibly_Different_Argument_List

For example, if one expression in tail position is:

    HEAD1 VAL1 (HEAD2 VAL2) VAL3

Converter will be passed each of these lists: [HEAD1, VAL1, HEAD2 VAL2, VAL3],
[VAL1], [HEAD2, VAL2], [VAL2], and [VAL3], with t set to 1 for [HEAD1, ...] and
0 for the rest. If Converter returns Wrapper for HEAD1, and HEAD1', VAL1',
HEAD2', VAL2', VAL3' for each of the transformed expressions, then the final syntax
tree will contain:

    Wrapper (HEAD1' VAL1' (HEAD2' VAL2') VAL3')

If you don't want to insert any substantial Wrapper, just return the __id__
macro here.

In Pure syntax, block constructs can occur as heads, as in ((if a then succ
else pred) d). And these applications sometimes occur in tail position. In such
cases, we ignore the block-external values when determining whether elements in
the block's arms are heads, and the arms are never counted as being in tail
position. So for example, if the expression:

    (case a of p1 = b b2; p2 = c end) d

is in tail position, Converter will be passed the lists [a], [b, b2], [b2],
[c], and [d], and the tail position flag will be 0 for all of them. Between
[c] and [d], though, Converter will be passed the list [(case a of p1 = b b2; p2 =
c end), d], and this will be flagged as being in tail position. If you want to
pattern match inside the current_atom here, you'll need to declare Converter as
quoteargs, or else quote the current_atom and pattern-match in an auxiliary
macro.

On the other hand, when d is absent, then the arms `b b2` and `c` of the case
block will be flagged as being in tail position, and the case block itself
won't be passed to Converter. That is, if the expression:

    case a of p1 = b b2; p2 = c end

is in tail position, Converter will be passed the lists [a], [b, b2], [b2], and
[c], and the tail position flag will be 1 for the second and fourth of those.

Saturated applications of ($$) are treated similarly: for:

    (a a2 $$ b b2) c

Converter is passed the lists [($$), a a2, b b2, c], [a, a2], [a2], [b, b2],
[b2], and [c], and only the first of these might be flagged as in tail
position. But for:

    a a2 $$ b b2

Converter is only passed the lists [a, a2], [a2], [b, b2], [b2], and the third
of these might be flagged as in tail position.

There are design considerations motivating not extending the same treatment to
(&&) and (||); see the comments in the code below. `a a2 && b b2` is always
handled like ordinary `op (a a2) (b b2)`.

Converter will be passed lambda constructions, for example if the
expression:

    (\a -> b c) d

is in tail position, Converter will be passed the lists [b, c], [c], [(\a -> b
c), d], and [d], and exactly the third will be flagged as in tail position.

At the end, walker will return a value of the form
Final_State:Converted_Pure_Expression.

*/

using common;
namespace __macro__;
public walker;
namespace __macro__::walker;
using namespace __macro__;

private prune free;
private process;
private process_if1 process_if2 process_if3;
private process_case unwind_case;
private process_when unwind_when;
private process_with1 process_with2 unwind_with;
private process_seq;
private process_app unwind_app1 unwind_app2;
private finish_w finish_seq finish_lambda finish;

#! --quoteargs __macro__::walker::process

def __macro__::walker converter symbol_list state expression = __tail__ (process converter 0 1 [symbol_list,state,expression]);

def prune s []         = [];
def prune s (s:xs)     = xs;
def prune s ((s-->_):xs) = xs;
def prune s (x:xs)     = x:prune s xs;

/*
    free (F:more) selector applying? PATTERN
    where selector = 0 for interested only in nonheads
                   = 1 for in outer context, interested in outer head and all nonheads
                   = 2 for in outer context, interested only in outer head

    // start with F free
    // free _ 1 0 pat (count both outer head and all nonheads as binding)
    \var1 -> EXPR1 // inside EXPR1, F-{var1} are free
    // end with F free

    // start with set of free symbols F
    case EXPR0 of // inside EXPR0, F are free
        // for each line: free _ 0 0 pat
        head1 var1 -> EXPR1; // inside EXPR1, F-{var1} are free
        head2 var2 -> EXPR2; // inside EXPR2, F-{var2} are free
    end;
    // end with F free

    // start with F free
    EXPR0 when // inside EXPR2, F-{var1,var2} are free
        // free _ 0 0 pat, and carry-through
        head1 var1 <- EXPR1; // inside EXPR1, F are free
        head2 var2 <- EXPR2; // inside EXPR2, F-{var1} are free
    end;
    // end with F free

    // start with F free
    EXPR0 with // inside EXPR2, F-{head1,head2} are free
        // free _ 2 0 pat (only want outer head)
        // then for each line: free 0 0 pat (ignore all heads)
        head1 var1 => EXPR1; // inside EXPR1, F-{head1,head2,var1} are free
        head2 var2 => EXPR2; // inside EXPR2, F-{head1,head2,var2} are free
    end;
    // end with F free

    complete block should always end with originalF:new_state:new_expression:...

    FIXME?
    __as__ patterns `show` funny (they print with namespace:: at the binding
    site but not at the use sites), but seem to work properly

*/

def free fs@([]:_) _     _       _            = fs;
def free fs        sel   app (pat __type__ _) |
    free fs        sel@2 app (_ __as__ pat)   = free fs sel app pat;
def free (f:fs)    sel   app (s __as__ pat)   = free (prune s f:fs) sel app pat; // sel<2
def free fs        2     _       (u@_ _)      = free fs 2 1 u; // only selecting outer head
def free fs        sel   _       (u@_ v)      = free (free fs 0 0 v) sel 1 u;
def free fs        0     1       s            = fs;           // s is an inner head, always ignore
def free (f:fs)    _     _       s            = prune s f:fs; // s is an outer head, or occurs unapplied

def process c q t (f:state:(__ifelse__ i y n):rest) = process_if1 rest c q t y n (process c q 0 [f, state, i]);
// when the if-block is a head, we always count its arms as non-tail
def process_if1 []   c q t y n [f, state, i]   = process_if2 []   c q t i n (process c q t [f, state, y]);
def process_if1 rest c q t y n [f, state, i]   = process_if2 rest c q t i n (process c q 0 [f, state, y]);
def process_if2 []   c q t i n [f, state, y]   = process_if3 []   c q t i y (process c q t [f, state, n]);
def process_if2 rest c q t i n [f, state, y]   = process_if3 rest c q t i y (process c q 0 [f, state, n]);
def process_if3 []   _ _ 1 i y [f, state, n]   = f:state:(__ifelse__ i y n):[];
def process_if3 rest c q t i y [f, state, n]   = finish f t (c q t f state ((__ifelse__ i y n):rest));

def process c q t (f:state:(__case__ x clauses):rest)              = process_case rest f c q t [] clauses (process c q 0 [f, state, x]);
// when the case-block is a head, we always count its arms as non-tail
def process_case []   f0 c q t  xs ((p-->y):clauses) [_, state, x] = process_case []   f0 c q t (p:x:xs) clauses (process c q t $ free [f0, state, y] 0 0 p);
def process_case rest f0 c q t  xs ((p-->y):clauses) [_, state, x] = process_case rest f0 c q t (p:x:xs) clauses (process c q 0 $ free [f0, state, y] 0 0 p);
def process_case rest f0 c q t  xs []                [_, state, x] = unwind_case rest f0 c q t state (x:xs) [];
def unwind_case  rest f0 c q t state (y:p:xs) clauses              = unwind_case rest f0 c q t state xs ((p-->y):clauses);
def unwind_case  []   f0 _ _ 1 state [x]      clauses              = f0:state:(__case__ x clauses):[];
def unwind_case  rest f0 c q t state [x]      clauses              = finish f0 t (c q t f0 state ((__case__ x clauses):rest));

def process c q t (f:state:(x __when__ clauses):rest)                  = process_when rest f c q t [] clauses [f] [[], state, 'x];
def process_when rest f0 c q t xs ((p-->y):clauses) [f] [_, state, x]  = process_when rest f0 c q t (p:x:xs) clauses (free [f] 0 0 p) (process c q 0 [f, state, y]);
def process_when rest f0 c q t xs []                [f] [_, state, x]  = unwind_when rest f0 c q t f state (x:xs) [];
def unwind_when rest f0 c q t f state (y:p:xs) clauses                 = unwind_when rest f0 c q t f state xs ((p-->y):clauses);
// when the when-block is a head, we always count its main clause as non-tail
def unwind_when []   f0 c q t f state ['x]     clauses                 = finish_w []   f0 c q t (__when__) clauses (process c q t [f, state, x]);
def unwind_when rest f0 c q t f state ['x]     clauses                 = finish_w rest f0 c q t (__when__) clauses (process c q 0 [f, state, x]);

def process c q t (f:state:(x __with__ clauses):rest)                  = process_with1 rest f c q t clauses clauses [f, state, 'x];
def process_with1 rest f0 c q t clauses0 ((p-->y):clauses) f_s_x       = process_with1 rest f0 c q t clauses0 clauses (free f_s_x 2 0 p);
def process_with1 rest f0 c q t clauses0 []                f_s_x@(f:_) = process_with2 rest f0 c q t f [] clauses0 f_s_x;
def process_with2 rest f0 c q t f1 xs ((p-->y):clauses) [_, state, x]  = process_with2 rest f0 c q t f1 (p:x:xs) clauses (process c q 0 $ free [f1, state, y] 0 0 p);
def process_with2 rest f0 c q t f1 xs []                [_, state, x]  = unwind_with rest f0 c q t f1 state (x:xs) [];
def unwind_with   rest f0 c q t f1 state (y:p:xs) clauses              = unwind_with rest f0 c q t f1 state xs ((p-->y):clauses);
// when the with-block is a head, we always count its main clause as non-tail
def unwind_with   []   f0 c q t f1 state ['x]     clauses              = finish_w []   f0 c q t (__with__) clauses (process c q t [f1, state, x]);
def unwind_with   rest f0 c q t f1 state ['x]     clauses              = finish_w rest f0 c q t (__with__) clauses (process c q 0 [f1, state, x]);

def finish_w []   f0 _ _ 1 w clauses [_, state, x] = f0:state:(w x clauses):[];
def finish_w rest f0 c q t w clauses [_, state, x] = finish f0 t (c q t f0 state ((w x clauses):rest));

def process c q t (f:state:(__lambda__ ps x):rest) = finish_lambda rest f c q t ps (process c q 0 $ free [f, state, x] 1 0 ps);
def finish_lambda rest f0 c q t ps [_, state, x]   = finish f0 t (c q t f0 state ((__lambda__ ps x):rest));

// We need to keep the head u in a head position so that we can use the patterns
// (quote ...) to match it literally. Potentially the head might be a macro
// that unintentionally gets triggered when adding the vs list as we do here. I
// suspect that the same threat would in principle confront any other solution.
def process c q t (f:state:(us@_ v):rest)        = process_app rest c q t f state (us [v]);
def process_app rest c q t f state ((us@_ v) vs) = process_app rest c q t f state (us (v:vs)); // recurse down to head

// we let process_app handle expressions of the form `(a a2 $$ b b2) c` normally: `b b2` won't be in tail position
// but when there is no c (rest is null), we special-case: then `b b2` may be in tail position
def process_app []   c q t f state (($$) [a, b]) = process_seq c q t ($$) b (process c q 0 [f, state, a]);
def process_seq c q t op b [f0, state, a]        = finish_seq t op a (process c q t [f0, state, b]);
def finish_seq t op a [f0, state, b]             = finish f0 t (state:op a b:[]); //  f0:state:op a b:[];

// `a a2 || b b2` and `a a2 && b b2` are trickier: semantically the first is equivalent to
// `(if x then x else b b2) when x = a a2 end`, but in the top expression of this, x occurs twice, only one instance of which could be
// in tail position. So should we flag `a a2` as in tail position or not? Assuming not, where do we put the wrapper returned from `b b2`, which
// is in tail position? Do we use `wrap (a a2 || b b2)` or `a a2 || wrap (b b2)`?
// We avoid these puzzles by just declaring neither of the arms as in tail position, but the whole construct `(||) (a a2) (b b2)` may
// be in tail position. So in these cases, Converter will always be passed [(||), a a2, b b2], [a a2], [a2], [b b2], [b2], with only the first
// possibly flagged as in tail position.
// With block constructs and ($$), on the other hand, when they occur in tail positions, the internal arms are flagged as in tail
// position, and the complex expression in those cases is never passed to Converter.

// we assume user doesn't rebind quote, or expect us to treat any other symbols as quoters
def process_app rest c q t f state (quote vs)    = unwind_app1 rest f c 1 t __id__ (process c q t ([]:state:quote:vs));
def process_app rest c q t f state ((') vs)      = unwind_app1 rest f c 1 t __id__ (process c q t ([]:state:('):vs));
def process_app rest c q t f state (u@_ vs)      = unwind_app1 rest f c q t __id__ (process c q t (f:state:u:vs));

def unwind_app1 rest f0 c q 1 _            (f:state:wrap:u:v:vs) |
    unwind_app1 rest f0 c q 0 wrap         (f:state:u:v:vs)      = unwind_app2 rest f0 c q wrap u      vs (process c q 0 [f, state, v]);
// the following is possible if the Converter function removes the vs
def unwind_app1 rest f0 c q 1 _            (f:state:wrap:u:[])   |
    unwind_app1 rest f0 c q 0 wrap         (f:state:u:[])        = f0:state:wrap u:rest;
def unwind_app2 rest f0 c q wrap us (v:vs) (f:state:[w])         = unwind_app2 rest f0 c q wrap (us w) vs (process c q 0 [f, state, v]);
def unwind_app2 rest f0 c q wrap us []     (_:state:[w])         = f0:state:wrap (us w):rest;

def process c q t (f:state:vs)          = finish f t (c q t f state vs);
def finish f 1 (state:wrap:[v])         = f:state:wrap v:[]; // when t=1 but v is a head, we let process_app handle wrap
def finish f t (state_v_rest)           = f:state_v_rest;

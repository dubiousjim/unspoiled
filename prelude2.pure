/*
 Dubiousjim's prelude2
*/

// permit pattern-matching on these
nonfix false true NULL inf nan;

/*
  Using the existing {} for `nothing`.

  I'm now tempted to just use '{x}, '{x,y} etc for single x, pair x y.
  One downside: currently pattern-matching on {} crashes
                have to use `m::matrix = ... if null m` instead
  Another: should the nothing be {}---which would be continuous with '{x} and so on?
           or should it be ()---the result of void and so on?  <=====
  Another: printf and friends expect their argv sequences as tuples   <=====
           anything else in the stdlibs?
  Another: '{M,N} is a bit slower than pair M N, and you want M and N to be evaluated first
  Why '{x,y} is any better than '(x,y)?
     we have a nesting single: {x} ~= x, '{{x}} ~= {x}
     contiguously allocated
  Space:
    {1,2,3} is 3 cells
    '{1,2,3} is 4 cells (so too '{1,2,{3}})
    triple 1 2 3 is 7 cells (so too 1:2:3)
    '(1,2,3) is 9 cells
    [1,2,3] is 9 cells
*/

/*
public fst snd trd;
// not clear these are needed, can just use (!0), (!1) etc.
fst {x} = x;
fst {x,_} = x;
fst {x,_,_} = x;
fst {x,_,_,_} = x;
fst {x,_,_,_,_} = x;
snd {_,x} = x;
snd {_,x,_} = x;
snd {_,x,_,_} = x;
snd {_,x,_,_,_} = x;
trd {_,_,x} = x;
trd {_,_,x,_} = x;
trd {_,_,x,_,_} = x;
*/

public either either2 either3;
// defined only on (long-enough) vectors
// extract the 1st, 2nd, or 3rd elements, or use default if {}
// these are macros so that the default position can be short-circuited
def either e default = either e with
    either {x} = x;
    either {x,_} = x;
    either {x,_,_} = x;
    // either {} = default;
    either v::matrix = default if null v;
                     = v!0;
end;

def either2 e default = either2 e with
    either2 {_,x} = x;
    either2 {_,x,_} = x;
    // either2 {} = default;
    either2 v::matrix = default if null v;
                      = v!1 if #v > 3;
end;

def either3 e default = either3 e with
    either3 {_,_,x} = x;
    // either3 {} = default;
    either3 v::matrix = default if null v;
                      = v!2 if #v > 3;
end;

using system;
def assert condition fmt args
    = if condition === 0 then throw (sprintf ("assertion failed: "+fmt) args)
      else condition;


public member;
public reverse_onto map_onto zip_onto zip3_onto;
public zipfoldl zipfoldr zipfoldl3 zipfoldr3;

member [] y = 0;
member (x:xs) y = case x == y of
                    res::int = 1 if res;
                             = member xs y otherwise;
                    res      = 1 if x===y;
                    // else we may want to count the membership test
                    // as unsettled: member xs y || res;
                    // instead we count it as false; that way we get
                    // free syntactic comparison of constructions for which
                    // == is undefined
                             = member xs y otherwise;
                  end;

// reverse with explicit base
reverse_onto [] base = base;
reverse_onto (x:xs) base = reverse_onto xs (x:base);

// map with explicit base
// not tail call
map_onto f [] base = base;
map_onto f (x:xs) base = f x : map_onto f xs base;

// zipwith/map2 with explicit base
// stops when shortest list expires
// not tail call
zip_onto f [] _ base | zip_onto f _ [] base = base;
zip_onto f (x:xs) (y:ys) base = f x y : zip_onto f xs ys base;

// zipwith3 with explicit base
// stops when shortest list expires
// not tail call
zip_onto3 f [] _ _ base | zip_onto3 f _ [] _ base | zip_onto3 f _ _ [] base = base;
zip_onto3 f (x:xs) (y:ys) (z:zs) base = f x y z : zip_onto3 f xs ys zs base;

// foldl and foldr on two lists in parallel, like zip/zipwith[3]
// stops when shortest list expires
zipfoldl f a _ [] | zipfoldl f a [] _ = a;
zipfoldl f a (x:xs) (y:ys) = zipfoldl f (f a x y) xs ys;

zipfoldr f a _ [] | zipfoldr f a [] _ = a;
zipfoldr f a xs@(_:_) ys@(_:_) = tick [] xs ys
with
  tick zs (x:xs) (y:ys) = tack (x:y:zs) (zipfoldr f a xs ys&)
                          if thunkp xs || thunkp ys;
                        = tick (x:y:zs) xs ys;
  tick zs _ [] | tick zs [] _ = tack zs a;
  tick zs xs ys = tack zs (zipfoldr f a xs ys);
  tack (x:y:zs) a = tack zs (f x y a);
  tack [] a = a;
end;

zipfoldl3 f a _ _ [] | zipfoldl3 f a _ [] _ | zipfoldl3 f a [] _ _ = a;
zipfoldl3 f a (x:xs) (y:ys) (w:ws) = zipfoldl3 f (f a x y w) xs ys ws;

zipfoldr3 f a _ _ [] | zipfoldr3 f a _ [] _ | zipfoldr3 f a [] _ _ = a;
zipfoldr3 f a xs@(_:_) ys@(_:_) ws@(_:_) = tick [] xs ys ws
with
  tick zs (x:xs) (y:ys) (w:ws) = tack (x:y:w:zs) (zipfoldr3 f a xs ys ws&)
                          if thunkp xs || thunkp ys || thunkp ws;
                        = tick (x:y:w:zs) xs ys ws;
  tick zs _ _ [] | tick zs _ [] _ | tick zs [] _ _ = tack zs a;
  tick zs xs ys ws = tack zs (zipfoldr3 f a xs ys ws);
  tack (x:y:w:zs) a = tack zs (f x y w a);
  tack [] a = a;
end;


public odd even log2;

type nat x::int = x>=0;
type nat x::bigint = x>=0;

type odd x::nat = x mod 2;
type even x::nat = ~odd x;
odd x = typep odd x; // turns type tag into type predicate
even x = typep even x; // could also do: `even = typep ('even)`, quoting needed to prevent looping


// from http://graphics.stanford.edu/~seander/bithacks.html#IntegerLogLookup
namespace __C;
%<
extern int floorlog2 (unsigned int v) {
  static const char log_2[256] = {
   -1,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
    5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
    6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
    6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
  };
  unsigned r = 0;
  register unsigned int t, tt;
  if ((tt = v >> 16)) {
    r = (t = tt >> 8) ? 24 + log_2[t] : 16 + log_2[tt];
  }
  else {
    r = ((t = v >> 8)) ? 8 + log_2[t] : log_2[v];
  }
  return r;
}
%>
namespace;
log2 x::int = __C::floorlog2 x if x > 0;


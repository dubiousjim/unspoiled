/* declare as constants for pattern-matching */
nonfix false true NULL inf nan;


public nothing single pair triple quad fst snd trd;
nonfix nothing;

type maybe (single _) | maybe (pair _ _)
    | maybe (triple _ _ _) | maybe (quad _ _ _ _) = 1;
type maybe nothing = 1;
// implicitly excludes everything else

fst (single x) = x;
fst (pair x _) = x;
fst (triple x _ _) = x;
fst (quad x _ _ _) = x;
snd (pair _ x) = x;
snd (triple _ x _) = x;
snd (quad _ x _ _) = x;
trd (triple _ _ x) = x;
trd (quad _ _ x _) = x;

// these are short-circuiting
def either e default = either e with
    either (single x) = x;
    either (pair x _) = x;
    either (triple x _ _) = x;
    either (quad x _ _ _) = x;
    either nothing = default;
end;

def either2 e default = either2 e with
    either2 (pair _ x) = x;
    either2 (triple _ x _) = x;
    either2 (quad _ x _ _) = x;
    either nothing = default;
end;

def either3 e default = either3 e with
    either3 (triple _ _ x) = x;
    either3 (quad _ _ x _) = x;
    either nothing = default;
end;

def assert condition fmt args = if condition === 0 then throw (sprintf ("assertion failed: "+fmt) args) else condition;

public member;
public reverse_onto map_onto zip_onto zip3_onto;
public zipfoldl zipfoldr zipfoldl3 zipfoldr3;

member [] y = 0;
member (x:xs) y = case x == y of
                    res::int = 1 if res;
                             = member xs y otherwise;
                    res      = 1 if x===y;
                    // else we may want to count the membership test
                    // as unsettled: member xs y || res;
                    // instead we count it as false; that way we get
                    // free syntactic comparison of constructions for which
                    // == is undefined
                             = member xs y otherwise;
                  end;

// reverse with explicit base
reverse_onto [] base = base;
reverse_onto (x:xs) base = reverse_onto xs (x:base);

// map with explicit base
// not tail call
map_onto f [] base = base;
map_onto f (x:xs) base = f x : map_onto f xs base;

// zipwith/map2 with explicit base
// stops when shortest list expires
// not tail call
zip_onto f [] _ base | zip_onto f _ [] base = base;
zip_onto f (x:xs) (y:ys) base = f x y : zip_onto f xs ys base;

// zipwith3 with explicit base
// stops when shortest list expires
// not tail call
zip3_onto f [] _ _ base | zip3_onto f _ [] _ base | zip3_onto f _ _ [] base = base;
zip3_onto f (x:xs) (y:ys) (z:zs) base = f x y z : zip3_onto f xs ys zs base;

// foldl and foldr on two lists in parallel, like zip/zipwith
// stops when shortest list expires
zipfoldl f a _ [] | zipfoldl f a [] _ = a;
zipfoldl f a (x:xs) (y:ys) = zipfoldl f (f a x y) xs ys;

zipfoldr f a _ [] | zipfoldr f a [] _ = a;
zipfoldr f a xs@(_:_) ys@(_:_) = tick [] xs ys
with
  tick zs (x:xs) (y:ys) = tack (x:y:zs) (zipfoldr f a xs ys&)
                          if thunkp xs || thunkp ys;
                        = tick (x:y:zs) xs ys;
  tick zs _ [] | tick zs [] _ = tack zs a;
  tick zs xs ys = tack zs (zipfoldr f a xs ys);
  tack (x:y:zs) a = tack zs (f x y a);
  tack [] a = a;
end;

zipfoldl3 f a _ _ [] | zipfoldl3 f a _ [] _ | zipfoldl3 f a [] _ _ = a;
zipfoldl3 f a (x:xs) (y:ys) (w:ws) = zipfoldl3 f (f a x y w) xs ys ws;

zipfoldr3 f a _ _ [] | zipfoldr3 f a _ [] _ | zipfoldr3 f a [] _ _ = a;
zipfoldr3 f a xs@(_:_) ys@(_:_) ws@(_:_) = tick [] xs ys ws
with
  tick zs (x:xs) (y:ys) (w:ws) = tack (x:y:w:zs) (zipfoldr3 f a xs ys ws&)
                          if thunkp xs || thunkp ys || thunkp ws;
                        = tick (x:y:w:zs) xs ys ws;
  tick zs _ _ [] | tick zs _ [] _ | tick zs [] _ _ = tack zs a;
  tick zs xs ys ws = tack zs (zipfoldr3 f a xs ys ws);
  tack (x:y:w:zs) a = tack zs (f x y w a);
  tack [] a = a;
end;


public odd even log2;

type nat x::int = x>=0;
type nat x::bigint = x>=0;

type odd x::nat = x mod 2;
type even x::nat = ~odd x;
odd x = typep odd x; // turns type tag into type predicate
even x = typep even x; // could also do: `even = typep ('even)`, quoting needed to prevent looping


// from http://graphics.stanford.edu/~seander/bithacks.html#IntegerLogLookup
namespace __C;
%<
extern int floorlog2 (unsigned int v) {
  static const char log_2[256] = {
   -1,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
    5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
    6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
    6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
  };
  unsigned r = 0;
  register unsigned int t, tt;
  if ((tt = v >> 16)) {
    r = (t = tt >> 8) ? 24 + log_2[t] : 16 + log_2[tt];
  }
  else {
    r = ((t = v >> 8)) ? 8 + log_2[t] : log_2[v];
  }
  return r;
}
%>
namespace;
log2 x::int = __C::floorlog2 x if x > 0;


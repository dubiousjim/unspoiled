/*
 ML-style functors (module-constructors) in Pure

 Here is some OCaml:

    module type COMPARABLE = sig
        type t
        val (<) : t -> t -> bool
    end;;

    module type SET = sig
        type element
        type set
        val empty : set
        val insert : set -> element -> set
        val member : set -> element -> bool
    end;;

    module MakeSet = functor(Elt: COMPARABLE) -> struct
      type element = Elt.t
      type set = element list
      let empty = []
      let rec insert s x = match s with
            | [] -> [x]
            | y::ys -> if Elt.(<) x y then x :: s (* x is smaller than every y *)
                       else if Elt.(<) y x then y :: insert ys x
                       else s (* x is already in s *)
      let rec member s x = match s with
            | [] -> false
            | y::ys -> if Elt.(<) x y then false (* x is smaller than every y *)
                       else if Elt.(<) y x then member ys x
                       else true
    end : SET with type element = Elt.t;;


    (* here is a case-sensitive set of strings *)
    module PlainStrings = struct
        type t = string
        let (<) x y = x < y
    end;;
    module StringSet = MakeSet (PlainStrings);;
    StringSet.member "bar" (StringSet.add "Bar" StringSet.empty);;
    (* result is: false *)

    (* here is a case-insensitive set of strings *)
    module CaselessStrings = struct
        type t = string
        let (<) x y = (String.lowercase x) < (String.lowercase y)
    end;;
    module CaselessStringSet = MakeSet (CaselessStrings);;
    CaselessStringSet.member "bar" (CaselessStringSet.add "Bar" CaselessStringSet.empty);;
    (* result is: true *)

 (This ability to parameterize on a single type in multiple ways is an
 advantage that ML-style functors have over Haskell's typeclasses.)


 Here's how to do the same in Pure
 ---------------------------------
 // OCaml's sig/module type sort-of corresponds to Pure interfaces
 // OCaml's struct/module corresponds to Pure namespaces


 // For present purposes, I'd like this to provide a pattern that different implementations of (<)
 // in different namespaces might match against. That is, when the binding of (<)
 // changes because you've changed namespaces, which types satisfy Comparable would
 // likewise change. Unfortunately that doesn't seem to work (and for other purposes
 // it may well be best that it doesn't). This declaration interprets (<) statically, using the binding
 // visible when the declaration is compiled.
 interface Comparable with
    x::Comparable < y::Comparable;
 end;

 // If interfaces worked the way I described, we could qualify the types here
 // like this:
 //    functor MakeSet( t1=>Comparable, t2=>... with
 //         /- implementation parameterized on t1 and t2 -/
 //    end;

 // Instead, we just have to trust that the types in the supplied namespaces
 // satisfy the interface we're assuming.

 functor MakeSet( t with
    // The implementation will use type t and function (<) from the supplied namespace.
    // Unfortunately, though this will in the end be *evaluated as* a toplevel context,
    // the mechanism used here doesn't parse it that way. So declarations like `const` and `let`
    // and `type` can't be used here.
    empty = [];
    insert [] x::t = [x];
    insert (y:ys) x::t = x:y:ys if x < y;
                       = y:insert ys x otherwise;
    member [] x::t = false;
    member (y:ys) x::t = member ys x if y < x;
                       = ~(x < y) otherwise;
 end);

 namespace PlainStrings with
    type t = string;
 end;

 namespace CaselessStrings with
    type t = string;
    extern char tolower(char);
    private lowercase;
    lowercase s = foldl1 (+) $ map (\c -> chr $ tolower $ ord c) s;
    infix (::<) <;
    x < y = lowercase x ::< lowercase y;
 end;

 MakeSet StringSet PlainStrings; // evaluates to:
        // namespace StringSet with
        //   type t = PlainStrings::t;
        //   using namespace PlainStrings;
        //   empty = [];
        //   insert [] x::t = [x];
        //   ...
        // end;
 MakeSet CaselessStringSet CaselessStrings;

 StringSet::member (StringSet::insert StringSet::empty "Bar") "bar" // false
 CaselessStringSet::member (CaselessStringSet::insert CaselessStringSet::empty "Bar") "bar" // true
*/

#! --quoteargs functor
def functor name::var (ts __with__ body) = eval m when
    type_decls = types ts;
    body = __str__ $ '(0 __with__ body);
    n = sprintf "namespace %%s with %s using namespace %%s; %s; end;" (join " " type_decls, body!!(7..#body-5));
    m = sprintf "def %s M::var S::var = eval (sprintf %s (str M, %s, str S));" (str name, str n, join ", " (repeatn (#type_decls) "str S"));
end with
/*
    type1 (t=>iface) = sprintf "type %s v = typep %s v && typep %%s::%s v;" (str t, str iface, str t);
    types (t@(_=>_)),ts = type1 t : types ts;
    types t@(_=>_) = [type1 t];
*/
    type1 t = sprintf "type %s = %%s::%s;" (str t, str t);
    types (t,ts) = type1 t : types ts;
    types t = [type1 t];
end;

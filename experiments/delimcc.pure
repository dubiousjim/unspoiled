/* delimcc macros

   Copyright (c) 2012 by Dubiousjim <dubiousjim@gmail.com>.
   BSD License at https://github.com/dubiousjim/unspoiled/blob/master/LICENSE


This is an experiment at using the __macro__::walker code rewriter to implement
delimited continuations (shift/reset and friends).

It succeeds only in limited cases, for example:

    Welcome to Racket v5.2.
    > (require racket/control)
    > (define (f choice val)
    >   (cons 'outside
    >     (reset (cons 'middle
    >              (shift k
    >                (case choice
    >                  ((1) (k val))
    >                  ((2) (cons 'inner (k val)))
    >                  ((3) val)
    >                  ((4) k)))))))
    > (values (f 1 (list 1)) (f 2 (list 1)) (f 3 (list 1)) ((cdr (f 4 #f)) 'something))
    '(outside middle 1)
    '(outside inner middle 1)
    '(outside 1)
    '(middle . something)

Compare:

    Pure 0.53 (x86_64-portbld-freebsd) Copyright (c) 2008-2012 by Albert Graef
    (Type 'help' for help, 'help copying' for license information.)
    Loaded prelude from /usr/local/lib/pure/prelude.pure.

    > using delimcc;
    > using namespace delimcc;
    > f choice val = outside:reset (middle:shift (\k ->
    >   case choice of 1 = k val; 2 = inner:k val; 3 = val; 4 = k; end));

    > show f
    f choice val = outside:((\k -> case choice of 1 = k val; 2 = inner:k
    val; 3 = val; 4 = k end) k with k v = middle:v end);

    > [f 1 [1], f 2 [1], f 3 [1], tail (f 4 0) something];
    [[outside,middle,1],[outside,inner,middle,1],[outside,1],middle:something]

Looks good so far. But---short of a complete CPS transform of the Pure program, which I'm
not doing---this only works up to a point.

    Welcome to Racket v5.2.
    > (require racket/control)
    > (reset (foldl (lambda (x a) (shift k (if (= x 6) a (begin (displayln
    > x) (k (+ a x)))))) 0 '(1 2 3 4 5 6 7 8 9 10)))
    1
    2
    3
    4
    5
    15

    Pure 0.53 (x86_64-portbld-freebsd) Copyright (c) 2008-2012 by Albert Graef
    (Type 'help' for help, 'help copying' for license information.)
    Loaded prelude from /usr/local/lib/pure/prelude.pure.

    > using namespace delimcc;
    > using system;
    > foo = reset (foldl (\a x -> shift (\k ->
    >   if x==6 then a else printf "%d\n" x $$ k (a+x))) 0 (1..10));

    > show foo
    foo = (\k -> if x==6 then a else printf "%d\n" x$$k (a+x)) k with k v =
    foldl (\a x -> v) 0 (1..10) end;

You can see that won't work, because x and a are no longer bound by the
(\a v -> ...).

    > foo;
    <stdin>, line 6: unhandled exception 'failed_cond' while evaluating
    'foo'

We need to leave the shift-body in place so that its variables still get
bound properly. Yet we want sometimes to escape from the shift-body to the
reset boundary, skipping over the "captured" part unless the user specifically
invokes it. This is easy enough to do with Pure exceptions if it's
all we want. But then if we do that, Pure throws away our stack. And
the specifications for delimited continuations include that k should be bound
to the computations that are no longer recoverable once that stack has
been discarded. If we handed k to external code that wanted to invoke it later,
we couldn't make it work.

So delimited continuations in full generality look not yet to be possible in
Pure, without additional compiler suppprt, or doing a full CPS transform of the
program. (Or minimally, that segment of the program that might invoke a
captured continuation.)

*/

namespace delimcc;
using walker;
using namespace __macro__;

public reset reset0;
public nonfix shift shift0 control control0 abort;

private convert_reset finish_reset finish_reset0 v k;
private nonfix nil;

/*
def subst v [] = v;
def subst v ((v-->w):xs) = w;
def subst v (x:xs) = subst v xs;

def unwind us (v:vs) = unwind (us v) vs;
def unwind us [] = us;
*/

def convert_reset q 1 (abort:_) nil (op@abort:arg:rest) = op arg:__id__:v:rest;

def convert_reset q 1 (_:shift:_) nil (op@shift:arg:rest) |
    convert_reset q 1 (shift:_) nil (op@shift:arg:rest) |
    convert_reset q 1 (_:_:control:_) nil (op@control:arg:rest) |
    convert_reset q 1 (_:control:_) nil (op@control:arg:rest) |
    convert_reset q 1 (control:_) nil (op@control:arg:rest) |
    convert_reset q 1 (_:_:_:shift0:_) nil (op@shift0:arg:rest) |
    convert_reset q 1 (_:_:shift0:_) nil (op@shift0:arg:rest) |
    convert_reset q 1 (_:shift0:_) nil (op@shift0:arg:rest) |
    convert_reset q 1 (shift0:_) nil (op@shift0:arg:rest) |
    convert_reset q 1 (_:_:_:_:control0:_) nil (op@control0:arg:rest) |
    convert_reset q 1 (_:_:_:control0:_) nil (op@control0:arg:rest) |
    convert_reset q 1 (_:_:control0:_) nil (op@control0:arg:rest) |
    convert_reset q 1 (_:control0:_) nil (op@control0:arg:rest) |
    convert_reset q 1 (control0:_) nil (op@control0:arg:rest) = op arg:__id__:v:rest;

def convert_reset q 0 (abort:_) nil (op@abort:arg:rest) = op arg:v:rest;

def convert_reset q 0 (_:shift:_) nil (op@shift:arg:rest) |
    convert_reset q 0 (shift:_) nil (op@shift:arg:rest) |
    convert_reset q 0 (_:_:control:_) nil (op@control:arg:rest) |
    convert_reset q 0 (_:control:_) nil (op@control:arg:rest) |
    convert_reset q 0 (control:_) nil (op@control:arg:rest) |
    convert_reset q 0 (_:_:_:shift0:_) nil (op@shift0:arg:rest) |
    convert_reset q 0 (_:_:shift0:_) nil (op@shift0:arg:rest) |
    convert_reset q 0 (_:shift0:_) nil (op@shift0:arg:rest) |
    convert_reset q 0 (shift0:_) nil (op@shift0:arg:rest) |
    convert_reset q 0 (_:_:_:_:control0:_) nil (op@control0:arg:rest) |
    convert_reset q 0 (_:_:_:control0:_) nil (op@control0:arg:rest) |
    convert_reset q 0 (_:_:control0:_) nil (op@control0:arg:rest) |
    convert_reset q 0 (_:control0:_) nil (op@control0:arg:rest) |
    convert_reset q 0 (control0:_) nil (op@control0:arg:rest) = op arg:v:rest;

def convert_reset q 1 symbols state xs = state:__id__:xs;
def convert_reset q 0 symbols state xs = state:xs;

def finish_reset [nil, body] = body;

def finish_reset0 [nil, body] = body;

def finish_reset [abort value, body] =
    reset(value);

def finish_reset0 [abort value, body] =
    reset0(value);

def finish_reset [shift kbody, body]  =
    reset(kbody k __with__ [(k v --> reset body)]);
def finish_reset [shift0 kbody, body] =
    reset(kbody k __with__ [(k v --> reset0 body)]);

def finish_reset [control kbody, body]  |
    finish_reset [control0 kbody, body] =
    reset(kbody k __with__ [(k v --> body)]);

def finish_reset0 [shift kbody, body]  =
    reset0(kbody k __with__ [(k v --> reset body)]);
def finish_reset0 [shift0 kbody, body] =
          (kbody k __with__ [(k v --> reset0 body)]);

def finish_reset0 [control kbody, body]  =
    reset0(kbody k __with__ [(k v --> body)]);
def finish_reset0 [control0 kbody, body] =
          (kbody k __with__ [(k v --> body)]);

def reset expression = finish_reset (walker convert_reset [abort,shift,control,shift0,control0] nil expression);
def reset0 expression = finish_reset0 (walker convert_reset [abort,shift,control,shift0,control0] nil expression);


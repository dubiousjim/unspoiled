// Some tests for set and bag data containers

using array, dict, heap, set;

// List of 1000 random integers from interval <0; 99> for stress tests
let randlist = 
[52,72,26,78,46,19,44,72,96,75,46,86,13,84,1,94,67,79,14,61,90,77,36,94,88,44,
 16,42,47,3,60,79,18,52,89,30,94,38,93,91,33,53,70,97,76,75,9,85,17,1,41,29,37,
 41,13,38,29,2,23,3,22,52,49,88,77,5,11,54,34,45,58,58,6,81,40,58,19,89,17,20,
 11,15,99,68,81,64,32,73,82,72,65,35,61,41,81,77,27,4,60,51,63,18,27,45,64,74,
 41,61,61,85,18,30,2,0,95,99,20,60,93,55,54,43,44,30,20,21,4,20,57,91,41,65,35,
 58,39,3,28,9,44,92,92,60,86,1,68,84,12,5,1,39,86,1,92,88,66,65,7,9,0,52,78,65,
 54,79,72,25,25,13,48,46,10,50,85,1,82,96,1,92,6,3,19,27,44,64,15,48,64,53,35,
 39,72,72,30,10,91,74,23,65,36,2,84,4,5,42,47,50,98,60,91,75,71,97,2,26,1,8,15,
 11,75,93,12,59,12,59,6,25,41,94,35,1,97,76,86,40,86,3,20,42,98,56,57,46,46,76,
 30,41,9,13,69,18,89,73,30,14,82,44,59,97,50,89,72,26,45,26,96,1,94,90,9,52,8,
 79,86,9,88,0,20,47,64,93,9,57,50,65,89,73,68,80,24,76,76,54,48,41,7,52,50,75,
 13,0,76,10,96,8,11,89,74,21,58,24,88,39,5,92,45,87,23,48,57,85,21,92,3,40,5,
 10,52,57,11,4,50,72,49,34,3,36,91,50,86,92,1,28,23,71,10,77,24,43,59,51,76,72,
 80,74,50,81,5,57,86,55,82,12,71,0,3,29,67,30,43,27,12,13,10,41,82,26,14,1,22,
 35,76,42,68,52,32,14,37,74,72,73,17,55,68,87,55,34,53,96,92,75,68,33,36,70,66,
 39,1,40,66,21,8,61,1,21,20,37,39,29,52,79,39,72,69,63,12,73,16,2,21,17,17,52,
 31,90,44,7,13,53,64,84,96,34,36,71,4,12,25,96,83,68,68,80,52,58,68,46,75,27,
 31,6,14,47,23,94,33,26,17,87,86,47,21,77,10,20,23,16,26,80,10,25,87,21,66,62,
 79,34,63,25,3,80,40,43,75,78,48,71,38,2,41,90,61,83,75,60,86,40,23,58,10,49,
 84,70,10,69,3,42,73,27,33,31,21,60,57,7,47,16,29,65,99,9,5,2,93,6,71,55,41,98,
 46,69,68,53,57,54,60,37,89,24,41,57,29,83,26,26,49,6,10,23,61,70,25,80,12,40,
 80,16,44,69,2,54,50,91,43,86,83,66,87,91,15,9,67,13,89,31,7,58,21,69,30,80,87,
 74,57,86,84,64,9,62,80,93,44,10,94,85,13,84,68,55,98,34,75,20,42,85,2,25,53,
 62,77,62,79,11,88,77,85,47,77,28,29,19,29,47,31,40,59,41,86,4,4,76,43,49,53,
 95,45,96,38,46,3,33,86,94,70,24,19,86,69,16,85,18,6,91,31,19,28,99,24,84,42,
 45,71,50,30,34,0,82,36,87,27,60,76,21,19,37,65,20,42,43,5,87,66,30,11,92,93,
 41,21,69,28,29,63,54,58,74,6,95,72,8,96,10,9,44,38,71,93,29,94,17,2,38,94,71,
 46,33,82,58,89,70,91,89,63,35,6,79,62,45,74,29,62,52,79,69,23,20,57,55,90,98,
 43,40,1,47,54,4,47,72,23,35,96,7,15,17,67,19,74,8,97,31,70,51,89,91,14,69,82,
 74,99,83,77,66,66,24,13,58,37,17,99,59,75,99,61,9,8,86,55,56,22,55,81,58,73,
 29,91,47,15,16,73,82,97,4,7,72,53,92,7,23,92,30,72,99,25,48,12,51,99,85,31,42,
 59,32,45,46,86,55,63,5,46,21,45,9,72,86,17,76,28,35,96,0,25,26,87,9,89,32,80,
 72,47,26,48,50,95,63,6,61,43,21,1,43,90,57,35,25,30,89,3,84,5,72,1,15,9,36,55,
 67,31,51,81,79,84,52,56,40,77,91,66,9,83,39,1,22,72,23,64,0,97,9,6,54,66,18,51,
 18,99,6,94,59,54,92,8,32,9,24,87,67,67,23,80,56,57,60,53,90,89,57,82,2,45,28,
 57,21,7,20,76,57,85,80,69,59,31,34,74,83,1,45,31,39,19,69,43,84,6,35,91,52,99,
 52,86,75,50,21,46,2,0,7,55,50,49,58,13,88,6,91,72,1,89,69,50,83,88,21,54,72,
 54,82,48,47,2,31,70,39];


/********************************************
*                                           *
*            Set and Bag tests              *
*                                           *
********************************************/
// Create data structures

let a = set (1..10);
let b = set (6..10);
 
let c = bag (1..10);
let d = bag (6..10);

let e = set (map str (1..10));
let f = bag (map str (1..10));

a; b; c; d; e; f;

// Type tests

setp a; setp c; bagp c; bagp a;

// Tests for empty data sets

null emptyset; null emptybag; null a; null c;

// Remove the first and last member

rmfirst a; rmfirst c; rmlast a; rmlast c;

// Delete data

foldl delete a (1..10);
foldl delete c (1..10);

// Find the first and last member

first a; last a; first c; last c;

// Size of data set

#a; #c;

// Membership tests

member a 5; member a 50; member c 5; member c 50;

// Convert data set to list

members a; members c;

// Relations

a == b; a ~= b; a < b; a <= b; a > b; a >= b;

a == a; a ~= a; a < a; a <= a; a > a; a >= a;

c == d; c ~= d; c < d; c <= d; c > d; c >= d;

c == c; c ~= c; c < c; c <= c; c > c; c >= c;

// Set operations

a + b; a * b; a - b;

c + d; c * d; c - d; (c + d) - d;

// Stress tests
foldl delete (foldl insert emptyset randlist) randlist;
foldl delete (foldl insert emptybag randlist) randlist;


/********************************************
*                                           *
*           HSet and HBag tests             *
*                                           *
********************************************/
// Create data structures

let r = zip randlist randlist;

let a = hset [(i, str i) | i = 1..10];
let b = hset [(i, str i) | i = 6..10];
 
let c = hbag [(i, str i) | i = 1..10];
let d = hbag [(i, str i) | i = 6..10];

let e = hset r;
let f = hbag r;


a; b; c; d; e; f;

// Type tests

hsetp a; hsetp c; hbagp c; hbagp a;

// Tests for empty data sets

null emptyhset; null emptyhbag; null a; null c;

// Remove the first and last member

rmfirst a; rmfirst c; rmlast a; rmlast c;

// Delete data

foldl delete a (1..10);
foldl delete c (1..10);

// Find the first and last member

first a; last a; first c; last c;

// Size of data set

#a; #c; #e; #f;

// Membership tests

member a 5; member a 50; member c 5; member c 50;

// Convert data set to list

members a; members c;

// Relations

a == b; a ~= b; a < b; a <= b; a > b; a >= b;

a == a; a ~= a; a < a; a <= a; a > a; a >= a;

c == d; c ~= d; c < d; c <= d; c > d; c >= d;

c == c; c ~= c; c < c; c <= c; c > c; c >= c;

// Set operations

a + b; a * b; a - b;

c + d; c * d; c - d; (c + d) - d;

// Stress tests
foldl delete (foldl insert emptyhset r) r;
foldl delete (foldl insert emptyhbag r) r;


/********************************************
*                                           *
*           Dict and HDict tests            *
*                                           *
********************************************/
// Create data structures

let a = dict [i => (double i) | i =  1..10];
let b = dict [i => (double i) | i = 11..20];
 
let c = hdict $ zipwith (=>) [i, double i, str i | i =   1..10] ( 1..10);
let d = hdict $ zipwith (=>) [i, double i, str i | i =  11..20] (11..20);

let e = dict $ zipwith (=>) (map str (1..10)) (map str (1..10));

let f = dict $ zipwith (=>) randlist randlist;
let g = hdict $ zipwith (=>) (zip randlist randlist) randlist;

a; b; c; d; e;

mkdict 1000 (1..10);
mkhdict 1000 [i, double i, str i | i = 1..10];

// Type tests

dictp a; dictp c; hdictp c; hdictp a;

// Tests for empty data sets

null emptydict; null emptyhdict; null a; null c;

// Remove the first and last member

rmfirst a; rmlast a;

// Find the first and last member

first a; last a;

// Size of data set

#a; #c;

// Should return 100

#f; #g;

// Membership tests

member a 5; member a 50; member e "5"; member e "50";
member c (5, 5.0, "5"); member c (50, 50.0, "50");

// Get value by index

a!5; e!"5"; c!(5, 5.0, "5"); a!50; c!(50, 50.0, "50");

// Slicing
a!!(5..15);
c!![i, double i, str i | i = 5..15];

// Convert data set to list

members a; members c;
keys a; keys c;
vals a; vals c;

// Update data (replace and add)

update a 5 5000; update a 5000 5000;
update c (5, 5.0, "5") 5000; update c (5000, 5000.0, "5000") 5000;

// Delete data

foldl delete a (1..10);
delete a 5000;

foldl delete c [i, double i, str i | i = 1..10];
delete c (5000, 5000.0, "5000");

// Relations

a == b; a ~= b;

a == a; a ~= a;

c == d; c ~= d;

c == c; c ~= c;

// Stress tests
foldl delete (mkdict 100 randlist) randlist;
foldl delete (mkhdict 100 randlist) randlist;


/********************************************
*                                           *
*          MDict and HMDict tests           *
*                                           *
********************************************/
// Create data structures

let a = mdict [i => (double i) | i =  1..10];
let b = mdict [i => (double i) | i = 11..20];
 
let c = hmdict $ zipwith (=>) [i, double i, str i | i =   1..10] ( 1..10);
let d = hmdict $ zipwith (=>) [i, double i, str i | i =  11..20] (11..20);

let e = mdict $ zipwith (=>) (map str (1..10)) (map str (1..10));

let f = mdict $ zipwith (=>) randlist (1..#randlist);
let g = hmdict $ zipwith (=>) (zip randlist randlist) (1..#randlist);

a; b; c; d; e;

mkmdict 1000 (1..10);
mkhmdict 1000 [i, double i, str i | i = 1..10];

// Type tests

mdictp a; mdictp c; hmdictp c; hmdictp a;

// Tests for empty data sets

null emptymdict; null emptyhmdict; null a; null c;

// Remove the first and last member

rmfirst a; rmlast a;

// Find the first and last member

first a; last a;

// Size of data set

#a; #c;

// Should return 1000

#f; #g;


// Membership tests

member a 5; member a 50; member e "5"; member e "50";
member c (5, 5.0, "5"); member c (50, 50.0, "50");

// Get value by index

a!5; e!"5"; c!(5, 5.0, "5"); a!50; c!(50, 50.0, "50"); f!50; g!(50, 50);

// Slicing
a!!(5..15);
c!![i, double i, str i | i = 5..15];

// Convert data set to list

members a; members c;
keys a; keys c;
vals a; vals c;

// Update data (replace and add)

update a 5 5000; update a 5000 5000;
update c (5, 5.0, "5") 5000; update c (5000, 5000.0, "5000") 5000;

(update f 50 5000)!50; (update g (50, 50) 5000)!(50, 50);

// Delete data

foldl delete a (1..10);
delete a 5000;

foldl delete c [i, double i, str i | i = 1..10];
delete c (5000, 5000.0, "5000");

// Remove only the first occurrence

(delete f 50)!50; (delete g (50, 50))!(50, 50);

// Remove key when all occurrences are deleted

member (foldl delete f (repeatn (#(f!50)) 50)) 50;
member (foldl delete g (repeatn (#(g!(50, 50))) (50, 50))) (50, 50);

member (delete_all f 50) 50;
member (delete_all g (50,50)) (50, 50);

// Relations

a == b; a ~= b;

a == a; a ~= a;

c == d; c ~= d;

c == c; c ~= c;

// Stress tests
foldl delete (mkmdict 100 randlist) randlist;
foldl delete (mkhmdict 100 randlist) randlist;


/********************************************
*                                           *
*                Heap tests                 *
*                                           *
********************************************/
// Create data structure

let a = heap ( 1..10);
let b = heap (11..20);
let c = heap (map str (1..10));
let d = heap (1.0..10.0);

a; c; d;

// Type tests

heapp a; heapp (set (1..10));

// Tests for empty data sets

null emptyheap; null a;

// Remove the first member

rmfirst a;

// Find the first member

first a;

// Size of the heap

#a;

// Convert the heap to a list

members a;

// Relations

a == b; a ~= b;

a == a; a ~= a;

// Stress test
#(heap randlist);

/********************************************
*                                           *
*                Array tests                *
*                                           *
********************************************/
// Create data structures

let a = array ( 1..10);
let b = array (11..20);

let c = array2 [[str (i + j) | i = j..10] | j =  1..10];
let d = array2 [[str (i + j) | i = j..10] | j = 11..20];

a; b; c; d;

mkarray 1000 10;
mkarray2 1000 (5, 5);

// Type tests

arrayp a; arrayp c; arrayp (set (1..2));

// Tests for empty data sets

null emptyarray; null a; null c;

// Remove the first and last member

rmfirst a; rmlast a; rmfirst a; rmfirst c;

// Find the first and last member

first a; last a; first c; last c;

// Size of data set

#a; #c;

// Get value by index

a!5; c!(2, 3); a!50; c!(20, 30);

// Slicing
a!!(5..15);
c!![(i, j) | i = 3..15; j = 3..15];

// Convert data set to list

members a; members c; members2 c;

// Update data (replace and add)

update a 5 5000; update2 c (2, 3) "5000";

// Insert data

insert a 5000;

// Append data

append a 5000;

// Relations

a == b; a ~= b;

a == a; a ~= a;

c == d; c ~= d;

c == c; c ~= c;


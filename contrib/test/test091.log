'__lambda__ [x] (x+1);
__lambda__ [x] (x+1)
foo = '__lambda__ [x] (x+1);
{
  rule #0: foo = '__lambda__ [x] (x+1)
  state 0: #0
}
foo;
__lambda__ [x] (x+1)
let x = '__case__ 99 [x __type__ int-->x+1 __if__ x>0];
x;
__case__ 99 [x __type__ int-->x+1 __if__ x>0]
eval x;
100
let x = '(x+1 __when__ [x __type__ int-->99]);
x;
x+1 __when__ [x __type__ int-->99]
eval x;
100
let x = '(f 99 __with__ [f (x __type__ int)-->x+1]);
x;
f 99 __with__ [f (x __type__ int)-->x+1]
eval x;
100
bar (__lambda__ [x/*0:10101*/,y/*0:101101*/] z/*0:11*/) = '__lambda__ [y/*0:101101*/,x/*0:10101*/] z/*0:11*/;
{
  rule #0: bar (__lambda__ [x,y] z) = '__lambda__ [y,x] z
  state 0: #0
	<app> state 1
  state 1: #0
	<app> state 2
  state 2: #0
	__lambda__ state 3
  state 3: #0
	<app> state 4
  state 4: #0
	<app> state 5
  state 5: #0
	: state 6
  state 6: #0
	<var> state 7
  state 7: #0
	<app> state 8
  state 8: #0
	<app> state 9
  state 9: #0
	: state 10
  state 10: #0
	<var> state 11
  state 11: #0
	[] state 12
  state 12: #0
	<var> state 13
  state 13: #0
}
{
  rule #0: x = bar ('__lambda__ [a,b] (a-b))
  state 0: #0
	<var> state 1
  state 1: #0
}
let x = bar ('__lambda__ [a,b] (a-b));
x;
__lambda__ [b,a] (a-b)
eval x 2 3;
1
baz x/*0:1*/ = '__lambda__ [x/*0:1*/] (x/*0:1*/+1);
{
  rule #0: baz x = '__lambda__ [x] (x+1)
  state 0: #0
	<var> state 1
  state 1: #0
}
{
  rule #0: x = baz y
  state 0: #0
	<var> state 1
  state 1: #0
}
let x = baz y;
x;
__lambda__ [y] (y+1)
eval x 99;
100
def bar (__lambda__ [x/*0:10101*/,y/*0:101101*/] z/*0:11*/) = __eval__ ('__lambda__ [y/*0:101101*/,x/*0:10101*/] z/*0:11*/);
def baz x/*0:1*/ = __eval__ ('__lambda__ [x/*0:1*/] (x/*0:1*/+1));
f = \b/*0:01*/ a/*0:1*/ -> a/*0:1*/-b/*0:01*/ {
  rule #0: _ b a = a-b
  state 0: #0
	<var> state 1
  state 1: #0
	<var> state 2
  state 2: #0
};
{
  rule #0: f = \b a -> a-b
  state 0: #0
}
f 2 3;
1
g = \y/*0:1*/ -> y/*0:1*/+1 {
  rule #0: _ y = y+1
  state 0: #0
	<var> state 1
  state 1: #0
};
{
  rule #0: g = \y -> y+1
  state 0: #0
}
f/*0*/ with f x/*0:1*/ = y/*0:*/ when y/*0:*/ = x/*0:1*/+1 {
  rule #0: y = x+1
  state 0: #0
	<var> state 1
  state 1: #0
} end {
  rule #0: f x = y when y = x+1 end
  state 0: #0
	<var> state 1
  state 1: #0
} end;
f
f/*0*/ with f x/*0:1*/ = y/*0*/ with y = x/*1:1*/+1 {
  rule #0: y = x+1
  state 0: #0
} end {
  rule #0: f x = y with y = x+1 end
  state 0: #0
	<var> state 1
  state 1: #0
} end;
f
x/*0:*/ __if__ 0 when x/*0:*/ = 1 {
  rule #0: x = 1
  state 0: #0
	<var> state 1
  state 1: #0
} end;
1 __if__ 0
get_macdef (*);
[]
get_macdef ($);
[f$x-->f x]
get_fundef bla;
[]
get_fundef ($);
[f$x-->f x]
fact n/*0:1*/ = n/*0:1*/*fact (n/*0:1*/-1) if n/*0:1*/>0;
fact n/*0:1*/ = 1;
{
  rule #0: fact n = n*fact (n-1) if n>0
  rule #1: fact n = 1
  state 0: #0 #1
	<var> state 1
  state 1: #0 #1
}
fact __with__ get_fundef fact;
fact __with__ [(fact n-->n*fact (n-1) __if__ n>0),(fact n-->1)]
{
  rule #0: x = eval (fact __with__ get_fundef fact)
  state 0: #0
	<var> state 1
  state 1: #0
}
let x = eval (fact __with__ get_fundef fact);
map x (0..10);
[1,1,2,6,24,120,720,5040,40320,362880,3628800]
foldr __with__ get_fundef foldr;
foldr __with__ [(foldr f a (x __type__ matrix)-->__C::matrix_foldr f a x),(foldr f a (s __type__ string)-->foldr f a (chars s)),(foldr f a []-->a),(foldr f a (xs __as__ (_:_))-->aux xs __with__ [(aux xs-->fold_pre len_pre xs __with__ [(fold_pre 0 _-->folded_tail),(fold_pre (n __type__ int) (x:xs)-->f x (fold_pre (n-1) xs))] __when__ [(len_pre __as__ _) folded_tail-->skip_ahead 0 xs]),(skip_ahead (n __type__ int) []-->n a),(skip_ahead (n __type__ int) (xs __as__ (_:_))-->n (aux xs) __if__ n==4096),(skip_ahead (n __type__ int) (x:xs)-->n (f x (aux xs&)) __if__ thunkp xs),(skip_ahead (n __type__ int) (x:xs)-->skip_ahead (n+1) xs),(skip_ahead (n __type__ int) xs-->n (foldr f a xs))])]
{
  rule #0: x = eval (foldr __with__ get_fundef foldr)
  state 0: #0
	<var> state 1
  state 1: #0
}
let x = eval (foldr __with__ get_fundef foldr);
x (*) 1 (1..10);
3628800
fold f/*0:001*/ a/*0:01*/ [] = a/*0:01*/;
fold f/*0:001*/ a/*0:01*/ xs@(_/*0:101*/:_/*0:11*/) = tick/*0*/ [] xs/*0:1*/ with tick zs/*0:01*/ (x/*0:101*/:xs/*0:11*/) = tack/*1*/ (x/*0:101*/:zs/*0:01*/) (fold f/*2:001*/ a/*2:01*/ xs/*1:11*/&) if thunkp xs/*0:11*/; tick zs/*0:01*/ (x/*0:101*/:xs/*0:11*/) = tick/*1*/ (x/*0:101*/:zs/*0:01*/) xs/*0:11*/; tick zs/*0:01*/ [] = tack/*1*/ zs/*0:01*/ a/*1:01*/; tick zs/*0:01*/ xs/*0:1*/ = tack/*1*/ zs/*0:01*/ (fold f/*1:001*/ a/*1:01*/ xs/*0:1*/) {
  rule #0: tick zs (x:xs) = tack (x:zs) (fold f a xs&) if thunkp xs
  rule #1: tick zs (x:xs) = tick (x:zs) xs
  rule #2: tick zs [] = tack zs a
  rule #3: tick zs xs = tack zs (fold f a xs)
  state 0: #0 #1 #2 #3
	<var> state 1
  state 1: #0 #1 #2 #3
	<var> state 2
	<app> state 3
	[] state 13
  state 2: #3
  state 3: #0 #1 #3
	<var> state 4
	<app> state 6
  state 4: #3
	<var> state 5
  state 5: #3
  state 6: #0 #1 #3
	<var> state 7
	: state 10
  state 7: #3
	<var> state 8
  state 8: #3
	<var> state 9
  state 9: #3
  state 10: #0 #1 #3
	<var> state 11
  state 11: #0 #1 #3
	<var> state 12
  state 12: #0 #1 #3
  state 13: #2 #3
}; tack (x/*0:0101*/:xs/*0:011*/) y/*0:1*/ = tack/*1*/ xs/*0:011*/ (f/*1:001*/ x/*0:0101*/ y/*0:1*/); tack [] y/*0:1*/ = y/*0:1*/ {
  rule #0: tack (x:xs) y = tack xs (f x y)
  rule #1: tack [] y = y
  state 0: #0 #1
	<app> state 1
	[] state 7
  state 1: #0
	<app> state 2
  state 2: #0
	: state 3
  state 3: #0
	<var> state 4
  state 4: #0
	<var> state 5
  state 5: #0
	<var> state 6
  state 6: #0
  state 7: #1
	<var> state 8
  state 8: #1
} end;
{
  rule #0: fold f a [] = a
  rule #1: fold f a xs@(_:_) = tick [] xs with tick zs (x:xs) = tack (x:zs) (fold f a xs&) if thunkp xs; tick zs (x:xs) = tick (x:zs) xs; tick zs [] = tack zs a; tick zs xs = tack zs (fold f a xs); tack (x:xs) y = tack xs (f x y); tack [] y = y end
  state 0: #0 #1
	<var> state 1
  state 1: #0 #1
	<var> state 2
  state 2: #0 #1
	<app> state 3
	[] state 8
  state 3: #1
	<app> state 4
  state 4: #1
	: state 5
  state 5: #1
	<var> state 6
  state 6: #1
	<var> state 7
  state 7: #1
  state 8: #0
}
add_fundef ('[(fold f a []-->a),(fold f a (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack (x:zs) (fold f a xs&) __if__ thunkp xs),(tick zs (x:xs)-->tick (x:zs) xs),(tick zs []-->tack zs a),(tick zs xs-->tack zs (fold f a xs)),(tack (x:xs) y-->tack xs (f x y)),(tack [] y-->y)])]);
()
fold (*) 1 (1..10);
3628800
def app f/*0:01*/ x/*0:1*/ = f/*0:01*/ x/*0:1*/;
add_macdef ('[app f x-->f x]);
()
h x/*0:01*/ y/*0:1*/ = x/*0:01*/+y/*0:1*/;
{
  rule #0: h x y = x+y
  state 0: #0
	<var> state 1
  state 1: #0
	<var> state 2
  state 2: #0
}
h 2 3;
5
{
  rule #0: fold f a xs@(_:_) = tick [] xs with tick zs (x:xs) = tack (x:zs) (fold f a xs&) if thunkp xs; tick zs (x:xs) = tick (x:zs) xs; tick zs [] = tack zs a; tick zs xs = tack zs (fold f a xs); tack (x:xs) y = tack xs (f x y); tack [] y = y end
  state 0: #0
	<var> state 1
  state 1: #0
	<var> state 2
  state 2: #0
	<app> state 3
  state 3: #0
	<app> state 4
  state 4: #0
	: state 5
  state 5: #0
	<var> state 6
  state 6: #0
	<var> state 7
  state 7: #0
}
del_fundef ('(fold f a []-->a));
()
del_macdef ('(app f x-->f x));
()
get_fundef fold;
[fold f a (xs __as__ (_:_))-->tick [] xs __with__ [(tick zs (x:xs)-->tack (x:zs) (fold f a xs&) __if__ thunkp xs),(tick zs (x:xs)-->tick (x:zs) xs),(tick zs []-->tack zs a),(tick zs xs-->tack zs (fold f a xs)),(tack (x:xs) y-->tack xs (f x y)),(tack [] y-->y)]]
get_macdef app;
[]
get_typedef list;
[(list []-->1),(list (_:_)-->1)]
type mylist [];
type mylist (_/*0:101*/:_/*0:11*/);
type mylist {
  rule #0: mylist [] = 1
  rule #1: mylist (_:_) = 1
  state 0: #0 #1
	<app> state 1
	[] state 6
  state 1: #1
	<app> state 2
  state 2: #1
	: state 3
  state 3: #1
	<var> state 4
  state 4: #1
	<var> state 5
  state 5: #1
  state 6: #0
}
add_typedef ('[mylist [],mylist (_:_)]);
()
map (typep mylist) [99,[],1..3,1:3];
[0,1,1,1]
get_typedef rlist;
[(rlist []-->1),(rlist (_:_ __type__ rlist)-->1)]
type myrlist [];
type myrlist (_/*0:101*/:_/*0:11*/ :: myrlist);
type myrlist {
  rule #0: myrlist [] = 1
  rule #1: myrlist (_:_::myrlist) = 1
  state 0: #0 #1
	<app> state 1
	[] state 6
  state 1: #1
	<app> state 2
  state 2: #1
	: state 3
  state 3: #1
	<var> state 4
  state 4: #1
	<var> state 5
  state 5: #1
  state 6: #0
}
add_typedef ('[(myrlist []-->1),(myrlist (_:_ __type__ myrlist)-->1)]);
()
map (typep myrlist) [99,[],1..3,1:3];
[0,1,1,0]
type mylist {
  rule #0: mylist (_:_) = 1
  state 0: #0
	<app> state 1
  state 1: #0
	<app> state 2
  state 2: #0
	: state 3
  state 3: #0
	<var> state 4
  state 4: #0
	<var> state 5
  state 5: #0
}
do del_typedef ('[(mylist []-->1),(mylist (_:_)-->1)]);
()
get_typedef mylist;
[]
add_vardef ['v-->99];
()
get_vardef ('v);
[v-->99]
add_constdef ['v-->77];
add_constdef [v-->77]
lasterr;
"symbol 'v' is already defined as a variable\n"
del_vardef ('v);
()
add_constdef ['v-->77];
()
get_constdef ('v);
[v-->77]
del_constdef ('v);
()
get_constdef ('v);
[]
type eqn (x/*0:101*/-->y/*0:11*/);
type eqn {
  rule #0: eqn (x-->y) = 1
  state 0: #0
	<app> state 1
  state 1: #0
	<app> state 2
  state 2: #0
	--> state 3
  state 3: #0
	<var> state 4
  state 4: #0
	<var> state 5
  state 5: #0
}
let syms = '[syms,argc,argv,true,false,inf,nan];
filter (typep eqn) (catmap get_vardef syms);
[(syms-->[syms,argc,argv,true,false,inf,nan]),(argc-->0),(argv-->[])]
filter (typep eqn) (catmap get_constdef syms);
[(true-->1),(false-->0),(inf-->inf),(nan-->nan)]
globsym "*" 1;
[bar,baz,eqn,f,fact,fold,foo,g,h,myrlist,syms,x]
do (flip clearsym 1) (globsym "*" 1);
()
globsym "*" 1;
[]
foo 0 = 0;
{
  rule #0: foo 0 = 0
  state 0: #0
	0::int state 1
  state 1: #0
}
add_fundef ('[foo 0-->0]);
()
foo 1 = 1;
{
  rule #0: foo 1 = 1
  rule #1: foo 0 = 0
  state 0: #0 #1
	1::int state 1
	0::int state 2
  state 1: #0
  state 2: #1
}
add_fundef_at ('(foo 0-->0)) ('[foo 1-->1]);
()
foo 99 = 99;
{
  rule #0: foo 1 = 1
  rule #1: foo 0 = 0
  rule #2: foo 99 = 99
  state 0: #0 #1 #2
	1::int state 1
	0::int state 2
	99::int state 3
  state 1: #0
  state 2: #1
  state 3: #2
}
add_fundef ('[foo 99-->99]);
()
foo 2 = 2;
{
  rule #0: foo 1 = 1
  rule #1: foo 2 = 2
  rule #2: foo 0 = 0
  rule #3: foo 99 = 99
  state 0: #0 #1 #2 #3
	1::int state 1
	2::int state 2
	0::int state 3
	99::int state 4
  state 1: #0
  state 2: #1
  state 3: #2
  state 4: #3
}
add_fundef_at ('(foo 0-->0)) ('[foo 2-->2]);
()
foo 4 = 4;
foo 3 = 3;
{
  rule #0: foo 1 = 1
  rule #1: foo 2 = 2
  rule #2: foo 4 = 4
  rule #3: foo 3 = 3
  rule #4: foo 0 = 0
  rule #5: foo 99 = 99
  state 0: #0 #1 #2 #3 #4 #5
	1::int state 1
	2::int state 2
	4::int state 3
	3::int state 4
	0::int state 5
	99::int state 6
  state 1: #0
  state 2: #1
  state 3: #2
  state 4: #3
  state 5: #4
  state 6: #5
}
add_fundef_at ('(foo 0-->0)) ('[(foo 4-->4),(foo 3-->3)]);
()
add_fundef_at ('(foo 0-->0)) ('[bar 2-->2]);
add_fundef_at (foo 0-->0) [bar 2-->2]
lasterr;
"error in function definition (wrong head symbol)\n"
get_fundef ('foo);
[(foo 1-->1),(foo 2-->2),(foo 4-->4),(foo 3-->3),(foo 0-->0),(foo 99-->99)]
type foo 0 = 0;
type foo {
  rule #0: foo 0 = 0
  state 0: #0
	0::int state 1
  state 1: #0
}
add_typedef ('[foo 0-->0]);
()
type foo 1;
type foo {
  rule #0: foo 1 = 1
  rule #1: foo 0 = 0
  state 0: #0 #1
	1::int state 1
	0::int state 2
  state 1: #0
  state 2: #1
}
add_typedef_at ('(foo 0-->0)) ('[foo 1-->1]);
()
type foo 99 = 99;
type foo {
  rule #0: foo 1 = 1
  rule #1: foo 0 = 0
  rule #2: foo 99 = 99
  state 0: #0 #1 #2
	1::int state 1
	0::int state 2
	99::int state 3
  state 1: #0
  state 2: #1
  state 3: #2
}
add_typedef ('[foo 99-->99]);
()
type foo 2 = 2;
type foo {
  rule #0: foo 1 = 1
  rule #1: foo 2 = 2
  rule #2: foo 0 = 0
  rule #3: foo 99 = 99
  state 0: #0 #1 #2 #3
	1::int state 1
	2::int state 2
	0::int state 3
	99::int state 4
  state 1: #0
  state 2: #1
  state 3: #2
  state 4: #3
}
add_typedef_at ('(foo 0-->0)) ('[foo 2-->2]);
()
type foo 4 = 4;
type foo 3 = 3;
type foo {
  rule #0: foo 1 = 1
  rule #1: foo 2 = 2
  rule #2: foo 4 = 4
  rule #3: foo 3 = 3
  rule #4: foo 0 = 0
  rule #5: foo 99 = 99
  state 0: #0 #1 #2 #3 #4 #5
	1::int state 1
	2::int state 2
	4::int state 3
	3::int state 4
	0::int state 5
	99::int state 6
  state 1: #0
  state 2: #1
  state 3: #2
  state 4: #3
  state 5: #4
  state 6: #5
}
add_typedef_at ('(foo 0-->0)) ('[(foo 4-->4),(foo 3-->3)]);
()
add_typedef_at ('(foo 0-->0)) ('[bar 2-->2]);
add_typedef_at (foo 0-->0) [bar 2-->2]
lasterr;
"error in type definition (wrong head symbol)\n"
get_typedef ('foo);
[(foo 1-->1),(foo 2-->2),(foo 4-->4),(foo 3-->3),(foo 0-->0),(foo 99-->99)]
def foo 0 = 0;
add_macdef ('[foo 0-->0]);
()
def foo 1 = 1;
add_macdef_at ('(foo 0-->0)) ('[foo 1-->1]);
()
def foo 99 = 99;
add_macdef ('[foo 99-->99]);
()
def foo 2 = 2;
add_macdef_at ('(foo 0-->0)) ('[foo 2-->2]);
()
def foo 4 = 4;
def foo 3 = 3;
add_macdef_at ('(foo 0-->0)) ('[(foo 4-->4),(foo 3-->3)]);
()
add_macdef_at ('(foo 0-->0)) ('[bar 2-->2]);
add_macdef_at (foo 0-->0) [bar 2-->2]
lasterr;
"error in macro definition (wrong head symbol)\n"
get_macdef ('foo);
[(foo 1-->1),(foo 2-->2),(foo 4-->4),(foo 3-->3),(foo 0-->0),(foo 99-->99)]
case '__lambda__ [x] (x+k) of x/*0:*/ = x/*0:*/ {
  rule #0: x = x
  state 0: #0
	<var> state 1
  state 1: #0
} end;
__lambda__ [x] (x+k)
y/*0:*/ when y/*0:*/ = '__lambda__ [x] (x+k) {
  rule #0: y = '__lambda__ [x] (x+k)
  state 0: #0
	<var> state 1
  state 1: #0
} end;
__lambda__ [x] (x+k)
y/*0*/ with y = '__lambda__ [x] (x+k) {
  rule #0: y = '__lambda__ [x] (x+k)
  state 0: #0
} end;
__lambda__ [x] (x+k)
'__lambda__ [x] (x+k/*0:*/) when k/*0:*/ = 2+x {
  rule #0: k = 2+x
  state 0: #0
	<var> state 1
  state 1: #0
} end;
__lambda__ [x] (x+(2+x))
'__lambda__ [x] (x+k/*0*/) with k = 2+x {
  rule #0: k = 2+x
  state 0: #0
} end;
__lambda__ [x] (x+(2+x))
f/*0*/ with f x/*0:1*/ = a/*0*/ x/*0:1*/ with a x/*0:1*/ = b/*1*/ x/*0:1*/ {
  rule #0: a x = b x
  state 0: #0
	<var> state 1
  state 1: #0
}; b x/*0:1*/ = a/*1*/ x/*0:1*/ {
  rule #0: b x = a x
  state 0: #0
	<var> state 1
  state 1: #0
} end {
  rule #0: f x = a x with a x = b x; b x = a x end
  state 0: #0
	<var> state 1
  state 1: #0
} end;
f
'(a __with__ [(a x-->b x),(b x-->a x)]);
a __with__ [(a x-->b x),(b x-->a x)]
'(a __with__ [(a x-->b x),(b x-->f x)]);
a __with__ [(a x-->b x),(b x-->f x)]
'(f 99 __with__ [(f x-->y __when__ [y-->g x]),(g x-->x+1)]);
f 99 __with__ [(f x-->y __when__ [y-->g x]),(g x-->x+1)]
eval ('(foo __with__ [foo x-->() __with__ [(bar x-->baz u __when__ [u-->x]),(baz x-->())]]));
foo
eval ('(foo __with__ [foo x-->() __with__ [(bar x-->baz x __when__ [_-->()]),(baz x-->())] __when__ [_-->()]]));
foo
'(foo __with__ [foo (x:xs) n-->foo xs (n-1) __if__ n>0]);
foo __with__ [foo (x:xs) n-->foo xs (n-1) __if__ n>0]
'(foo __with__ [foo (x __as__ [])-->[]]);
foo __with__ [foo (x __as__ [])-->[]]

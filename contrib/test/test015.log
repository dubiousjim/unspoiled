let randlist = [52,72,26,78,46,19,44,72,96,75,46,86,13,84,1,94,67,79,14,61,90,77,36,94,88,44,16,42,47,3,60,79,18,52,89,30,94,38,93,91,33,53,70,97,76,75,9,85,17,1,41,29,37,41,13,38,29,2,23,3,22,52,49,88,77,5,11,54,34,45,58,58,6,81,40,58,19,89,17,20,11,15,99,68,81,64,32,73,82,72,65,35,61,41,81,77,27,4,60,51,63,18,27,45,64,74,41,61,61,85,18,30,2,0,95,99,20,60,93,55,54,43,44,30,20,21,4,20,57,91,41,65,35,58,39,3,28,9,44,92,92,60,86,1,68,84,12,5,1,39,86,1,92,88,66,65,7,9,0,52,78,65,54,79,72,25,25,13,48,46,10,50,85,1,82,96,1,92,6,3,19,27,44,64,15,48,64,53,35,39,72,72,30,10,91,74,23,65,36,2,84,4,5,42,47,50,98,60,91,75,71,97,2,26,1,8,15,11,75,93,12,59,12,59,6,25,41,94,35,1,97,76,86,40,86,3,20,42,98,56,57,46,46,76,30,41,9,13,69,18,89,73,30,14,82,44,59,97,50,89,72,26,45,26,96,1,94,90,9,52,8,79,86,9,88,0,20,47,64,93,9,57,50,65,89,73,68,80,24,76,76,54,48,41,7,52,50,75,13,0,76,10,96,8,11,89,74,21,58,24,88,39,5,92,45,87,23,48,57,85,21,92,3,40,5,10,52,57,11,4,50,72,49,34,3,36,91,50,86,92,1,28,23,71,10,77,24,43,59,51,76,72,80,74,50,81,5,57,86,55,82,12,71,0,3,29,67,30,43,27,12,13,10,41,82,26,14,1,22,35,76,42,68,52,32,14,37,74,72,73,17,55,68,87,55,34,53,96,92,75,68,33,36,70,66,39,1,40,66,21,8,61,1,21,20,37,39,29,52,79,39,72,69,63,12,73,16,2,21,17,17,52,31,90,44,7,13,53,64,84,96,34,36,71,4,12,25,96,83,68,68,80,52,58,68,46,75,27,31,6,14,47,23,94,33,26,17,87,86,47,21,77,10,20,23,16,26,80,10,25,87,21,66,62,79,34,63,25,3,80,40,43,75,78,48,71,38,2,41,90,61,83,75,60,86,40,23,58,10,49,84,70,10,69,3,42,73,27,33,31,21,60,57,7,47,16,29,65,99,9,5,2,93,6,71,55,41,98,46,69,68,53,57,54,60,37,89,24,41,57,29,83,26,26,49,6,10,23,61,70,25,80,12,40,80,16,44,69,2,54,50,91,43,86,83,66,87,91,15,9,67,13,89,31,7,58,21,69,30,80,87,74,57,86,84,64,9,62,80,93,44,10,94,85,13,84,68,55,98,34,75,20,42,85,2,25,53,62,77,62,79,11,88,77,85,47,77,28,29,19,29,47,31,40,59,41,86,4,4,76,43,49,53,95,45,96,38,46,3,33,86,94,70,24,19,86,69,16,85,18,6,91,31,19,28,99,24,84,42,45,71,50,30,34,0,82,36,87,27,60,76,21,19,37,65,20,42,43,5,87,66,30,11,92,93,41,21,69,28,29,63,54,58,74,6,95,72,8,96,10,9,44,38,71,93,29,94,17,2,38,94,71,46,33,82,58,89,70,91,89,63,35,6,79,62,45,74,29,62,52,79,69,23,20,57,55,90,98,43,40,1,47,54,4,47,72,23,35,96,7,15,17,67,19,74,8,97,31,70,51,89,91,14,69,82,74,99,83,77,66,66,24,13,58,37,17,99,59,75,99,61,9,8,86,55,56,22,55,81,58,73,29,91,47,15,16,73,82,97,4,7,72,53,92,7,23,92,30,72,99,25,48,12,51,99,85,31,42,59,32,45,46,86,55,63,5,46,21,45,9,72,86,17,76,28,35,96,0,25,26,87,9,89,32,80,72,47,26,48,50,95,63,6,61,43,21,1,43,90,57,35,25,30,89,3,84,5,72,1,15,9,36,55,67,31,51,81,79,84,52,56,40,77,91,66,9,83,39,1,22,72,23,64,0,97,9,6,54,66,18,51,18,99,6,94,59,54,92,8,32,9,24,87,67,67,23,80,56,57,60,53,90,89,57,82,2,45,28,57,21,7,20,76,57,85,80,69,59,31,34,74,83,1,45,31,39,19,69,43,84,6,35,91,52,99,52,86,75,50,21,46,2,0,7,55,50,49,58,13,88,6,91,72,1,89,69,50,83,88,21,54,72,54,82,48,47,2,31,70,39];
{
  rule #0: a = set (1..10)
  state 0: #0
	<var> state 1
  state 1: #0
}
let a = set (1..10);
{
  rule #0: b = set (6..10)
  state 0: #0
	<var> state 1
  state 1: #0
}
let b = set (6..10);
{
  rule #0: c = bag (1..10)
  state 0: #0
	<var> state 1
  state 1: #0
}
let c = bag (1..10);
{
  rule #0: d = bag (6..10)
  state 0: #0
	<var> state 1
  state 1: #0
}
let d = bag (6..10);
{
  rule #0: e = set (map str (1..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let e = set (map str (1..10));
{
  rule #0: f = bag (map str (1..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = bag (map str (1..10));
a;
Set (avl::bin 4 (-1) (avl::bin 2 0 (avl::bin 1 0 avl::nil avl::nil) (avl::bin 3 0 avl::nil avl::nil)) (avl::bin 8 0 (avl::bin 6 0 (avl::bin 5 0 avl::nil avl::nil) (avl::bin 7 0 avl::nil avl::nil)) (avl::bin 9 (-1) avl::nil (avl::bin 10 0 avl::nil avl::nil))))
b;
Set (avl::bin 7 (-1) (avl::bin 6 0 avl::nil avl::nil) (avl::bin 9 0 (avl::bin 8 0 avl::nil avl::nil) (avl::bin 10 0 avl::nil avl::nil)))
c;
Bag (avl::bin (4=>[4]) (-1) (avl::bin (2=>[2]) 0 (avl::bin (1=>[1]) 0 avl::nil avl::nil) (avl::bin (3=>[3]) 0 avl::nil avl::nil)) (avl::bin (8=>[8]) 0 (avl::bin (6=>[6]) 0 (avl::bin (5=>[5]) 0 avl::nil avl::nil) (avl::bin (7=>[7]) 0 avl::nil avl::nil)) (avl::bin (9=>[9]) (-1) avl::nil (avl::bin (10=>[10]) 0 avl::nil avl::nil))))
d;
Bag (avl::bin (7=>[7]) (-1) (avl::bin (6=>[6]) 0 avl::nil avl::nil) (avl::bin (9=>[9]) 0 (avl::bin (8=>[8]) 0 avl::nil avl::nil) (avl::bin (10=>[10]) 0 avl::nil avl::nil)))
e;
Set (avl::bin "4" 0 (avl::bin "2" 1 (avl::bin "1" (-1) avl::nil (avl::bin "10" 0 avl::nil avl::nil)) (avl::bin "3" 0 avl::nil avl::nil)) (avl::bin "6" (-1) (avl::bin "5" 0 avl::nil avl::nil) (avl::bin "8" 0 (avl::bin "7" 0 avl::nil avl::nil) (avl::bin "9" 0 avl::nil avl::nil))))
f;
Bag (avl::bin ("4"=>["4"]) 0 (avl::bin ("2"=>["2"]) 1 (avl::bin ("1"=>["1"]) (-1) avl::nil (avl::bin ("10"=>["10"]) 0 avl::nil avl::nil)) (avl::bin ("3"=>["3"]) 0 avl::nil avl::nil)) (avl::bin ("6"=>["6"]) (-1) (avl::bin ("5"=>["5"]) 0 avl::nil avl::nil) (avl::bin ("8"=>["8"]) 0 (avl::bin ("7"=>["7"]) 0 avl::nil avl::nil) (avl::bin ("9"=>["9"]) 0 avl::nil avl::nil))))
setp a;
1
setp c;
0
bagp c;
1
bagp a;
0
null emptyset;
1
null emptybag;
1
null a;
0
null c;
0
rmfirst a;
Set (avl::bin 4 (-1) (avl::bin 2 (-1) avl::nil (avl::bin 3 0 avl::nil avl::nil)) (avl::bin 8 0 (avl::bin 6 0 (avl::bin 5 0 avl::nil avl::nil) (avl::bin 7 0 avl::nil avl::nil)) (avl::bin 9 (-1) avl::nil (avl::bin 10 0 avl::nil avl::nil))))
rmfirst c;
Bag (avl::bin (4=>[4]) (-1) (avl::bin (2=>[2]) (-1) avl::nil (avl::bin (3=>[3]) 0 avl::nil avl::nil)) (avl::bin (8=>[8]) 0 (avl::bin (6=>[6]) 0 (avl::bin (5=>[5]) 0 avl::nil avl::nil) (avl::bin (7=>[7]) 0 avl::nil avl::nil)) (avl::bin (9=>[9]) (-1) avl::nil (avl::bin (10=>[10]) 0 avl::nil avl::nil))))
rmlast a;
Set (avl::bin 4 (-1) (avl::bin 2 0 (avl::bin 1 0 avl::nil avl::nil) (avl::bin 3 0 avl::nil avl::nil)) (avl::bin 8 1 (avl::bin 6 0 (avl::bin 5 0 avl::nil avl::nil) (avl::bin 7 0 avl::nil avl::nil)) (avl::bin 9 0 avl::nil avl::nil)))
rmlast c;
Bag (avl::bin (4=>[4]) (-1) (avl::bin (2=>[2]) 0 (avl::bin (1=>[1]) 0 avl::nil avl::nil) (avl::bin (3=>[3]) 0 avl::nil avl::nil)) (avl::bin (8=>[8]) 1 (avl::bin (6=>[6]) 0 (avl::bin (5=>[5]) 0 avl::nil avl::nil) (avl::bin (7=>[7]) 0 avl::nil avl::nil)) (avl::bin (9=>[9]) 0 avl::nil avl::nil)))
foldl delete a (1..10);
Set avl::nil
foldl delete c (1..10);
Bag avl::nil
first a;
1
last a;
10
first c;
1
last c;
10
#a;
10
#c;
10
member a 5;
1
member a 50;
0
member c 5;
1
member c 50;
0
members a;
[1,2,3,4,5,6,7,8,9,10]
members c;
[1,2,3,4,5,6,7,8,9,10]
a==b;
0
a~=b;
1
a<b;
0
a<=b;
0
a>b;
1
a>=b;
1
a==a;
1
a~=a;
0
a<a;
0
a<=a;
1
a>a;
0
a>=a;
1
c==d;
0
c~=d;
1
c<d;
0
c<=d;
0
c>d;
1
c>=d;
1
c==c;
1
c~=c;
0
c<c;
0
c<=c;
1
c>c;
0
c>=c;
1
a+b;
Set (avl::bin 4 (-1) (avl::bin 2 0 (avl::bin 1 0 avl::nil avl::nil) (avl::bin 3 0 avl::nil avl::nil)) (avl::bin 8 0 (avl::bin 6 0 (avl::bin 5 0 avl::nil avl::nil) (avl::bin 7 0 avl::nil avl::nil)) (avl::bin 9 (-1) avl::nil (avl::bin 10 0 avl::nil avl::nil))))
a*b;
Set (avl::bin 8 0 (avl::bin 6 (-1) avl::nil (avl::bin 7 0 avl::nil avl::nil)) (avl::bin 9 (-1) avl::nil (avl::bin 10 0 avl::nil avl::nil)))
a-b;
Set (avl::bin 4 1 (avl::bin 2 0 (avl::bin 1 0 avl::nil avl::nil) (avl::bin 3 0 avl::nil avl::nil)) (avl::bin 5 0 avl::nil avl::nil))
c+d;
Bag (avl::bin (4=>[4]) (-1) (avl::bin (2=>[2]) 0 (avl::bin (1=>[1]) 0 avl::nil avl::nil) (avl::bin (3=>[3]) 0 avl::nil avl::nil)) (avl::bin (8=>[8,8]) 0 (avl::bin (6=>[6,6]) 0 (avl::bin (5=>[5]) 0 avl::nil avl::nil) (avl::bin (7=>[7,7]) 0 avl::nil avl::nil)) (avl::bin (9=>[9,9]) (-1) avl::nil (avl::bin (10=>[10,10]) 0 avl::nil avl::nil))))
c*d;
Bag (avl::bin (8=>[8]) 0 (avl::bin (6=>[6]) (-1) avl::nil (avl::bin (7=>[7]) 0 avl::nil avl::nil)) (avl::bin (9=>[9]) (-1) avl::nil (avl::bin (10=>[10]) 0 avl::nil avl::nil)))
c-d;
Bag (avl::bin (4=>[4]) 1 (avl::bin (2=>[2]) 0 (avl::bin (1=>[1]) 0 avl::nil avl::nil) (avl::bin (3=>[3]) 0 avl::nil avl::nil)) (avl::bin (5=>[5]) 0 avl::nil avl::nil))
c+d-d;
Bag (avl::bin (4=>[4]) (-1) (avl::bin (2=>[2]) 0 (avl::bin (1=>[1]) 0 avl::nil avl::nil) (avl::bin (3=>[3]) 0 avl::nil avl::nil)) (avl::bin (8=>[8]) 0 (avl::bin (6=>[6]) 0 (avl::bin (5=>[5]) 0 avl::nil avl::nil) (avl::bin (7=>[7]) 0 avl::nil avl::nil)) (avl::bin (9=>[9]) (-1) avl::nil (avl::bin (10=>[10]) 0 avl::nil avl::nil))))
foldl delete (foldl insert emptyset randlist) randlist;
Set avl::nil
foldl delete (foldl insert emptybag randlist) randlist;
Bag avl::nil
{
  rule #0: r = zip randlist randlist
  state 0: #0
	<var> state 1
  state 1: #0
}
let r = zip randlist randlist;
{
  rule #0: a = hset (listmap (\i -> i,str i) (1..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let a = hset (listmap (\i/*0:1*/ -> i/*0:1*/,str i/*0:1*/ {
  rule #0: _ i = i,str i
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..10));
{
  rule #0: b = hset (listmap (\i -> i,str i) (6..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let b = hset (listmap (\i/*0:1*/ -> i/*0:1*/,str i/*0:1*/ {
  rule #0: _ i = i,str i
  state 0: #0
	<var> state 1
  state 1: #0
}) (6..10));
{
  rule #0: c = hbag (listmap (\i -> i,str i) (1..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let c = hbag (listmap (\i/*0:1*/ -> i/*0:1*/,str i/*0:1*/ {
  rule #0: _ i = i,str i
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..10));
{
  rule #0: d = hbag (listmap (\i -> i,str i) (6..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let d = hbag (listmap (\i/*0:1*/ -> i/*0:1*/,str i/*0:1*/ {
  rule #0: _ i = i,str i
  state 0: #0
	<var> state 1
  state 1: #0
}) (6..10));
{
  rule #0: e = hset r
  state 0: #0
	<var> state 1
  state 1: #0
}
let e = hset r;
{
  rule #0: f = hbag r
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = hbag r;
a;
HSet (avl::bin (71=>[(5,"5")]) (-1) (avl::bin (66=>[(6,"6")]) 0 (avl::bin (65=>[(7,"7")]) 0 avl::nil avl::nil) (avl::bin (68=>[(4,"4")]) 0 avl::nil avl::nil)) (avl::bin (80=>[(8,"8")]) 0 (avl::bin (77=>[(3,"3")]) 0 (avl::bin (75=>[(1,"1")]) 0 avl::nil avl::nil) (avl::bin (78=>[(2,"2")]) 0 avl::nil avl::nil)) (avl::bin (83=>[(9,"9")]) (-1) avl::nil (avl::bin (812=>[(10,"10")]) 0 avl::nil avl::nil))))
b;
HSet (avl::bin (66=>[(6,"6")]) (-1) (avl::bin (65=>[(7,"7")]) 0 avl::nil avl::nil) (avl::bin (83=>[(9,"9")]) 0 (avl::bin (80=>[(8,"8")]) 0 avl::nil avl::nil) (avl::bin (812=>[(10,"10")]) 0 avl::nil avl::nil)))
c;
HBag (avl::bin (71=>[(5,"5")]) (-1) (avl::bin (66=>[(6,"6")]) 0 (avl::bin (65=>[(7,"7")]) 0 avl::nil avl::nil) (avl::bin (68=>[(4,"4")]) 0 avl::nil avl::nil)) (avl::bin (80=>[(8,"8")]) 0 (avl::bin (77=>[(3,"3")]) 0 (avl::bin (75=>[(1,"1")]) 0 avl::nil avl::nil) (avl::bin (78=>[(2,"2")]) 0 avl::nil avl::nil)) (avl::bin (83=>[(9,"9")]) (-1) avl::nil (avl::bin (812=>[(10,"10")]) 0 avl::nil avl::nil))))
d;
HBag (avl::bin (66=>[(6,"6")]) (-1) (avl::bin (65=>[(7,"7")]) 0 avl::nil avl::nil) (avl::bin (83=>[(9,"9")]) 0 (avl::bin (80=>[(8,"8")]) 0 avl::nil avl::nil) (avl::bin (812=>[(10,"10")]) 0 avl::nil avl::nil)))
e;
HSet (avl::bin (130=>[(86,86)]) 1 (avl::bin (65=>[(23,23)]) 0 (avl::bin (36=>[(52,52)]) 0 (avl::bin (12=>[(44,44)]) (-1) (avl::bin (6=>[(42,42)]) 0 (avl::bin (3=>[(41,41)]) 0 (avl::bin (0=>[(40,40)]) 0 avl::nil avl::nil) (avl::bin (5=>[(43,43)]) 0 avl::nil avl::nil)) (avl::bin (9=>[(47,47)]) (-1) avl::nil (avl::bin (10=>[(46,46)]) 0 avl::nil avl::nil))) (avl::bin (27=>[(33,33)]) 0 (avl::bin (20=>[(36,36)]) 0 (avl::bin (17=>[(39,39)]) 0 (avl::bin (15=>[(45,45)]) 0 avl::nil avl::nil) (avl::bin (18=>[(38,38)]) 0 avl::nil avl::nil)) (avl::bin (23=>[(37,37)]) (-1) avl::nil (avl::bin (24=>[(32,32)]) 0 avl::nil avl::nil))) (avl::bin (30=>[(34,34)]) (-1) (avl::bin (29=>[(35,35)]) 0 avl::nil avl::nil) (avl::bin (34=>[(54,54)]) 1 (avl::bin (33=>[(55,55)]) 0 avl::nil avl::nil) avl::nil)))) (avl::bin (46=>[(50,50)]) (-1) (avl::bin (43=>[(49,49)]) 1 (avl::bin (39=>[(53,53)]) (-1) avl::nil (avl::bin (40=>[(48,48)]) 0 avl::nil avl::nil)) (avl::bin (45=>[(51,51)]) 0 avl::nil avl::nil)) (avl::bin (54=>[(58,58)]) (-1) (avl::bin (51=>[(57,57)]) 0 (avl::bin (48=>[(56,56)]) 0 avl::nil avl::nil) (avl::bin (53=>[(59,59)]) 0 avl::nil avl::nil)) (avl::bin (60=>[(60,60)]) 1 (avl::bin (57=>[(63,63)]) (-1) avl::nil (avl::bin (58=>[(62,62)]) 0 avl::nil avl::nil)) (avl::bin (63=>[(61,61)]) 0 avl::nil avl::nil))))) (avl::bin (86=>[(26,26)]) (-1) (avl::bin (72=>[(16,16)]) (-1) (avl::bin (68=>[(20,20)]) 0 (avl::bin (66=>[(22,22)]) 0 avl::nil avl::nil) (avl::bin (71=>[(21,21)]) 0 avl::nil avl::nil)) (avl::bin (78=>[(18,18)]) 0 (avl::bin (77=>[(19,19)]) 1 (avl::bin (75=>[(17,17)]) 0 avl::nil avl::nil) avl::nil) (avl::bin (83=>[(25,25)]) 0 (avl::bin (80=>[(24,24)]) 0 avl::nil avl::nil) (avl::bin (85=>[(27,27)]) 0 avl::nil avl::nil)))) (avl::bin (111=>[(13,13)]) 0 (avl::bin (99=>[(9,9)]) 0 (avl::bin (92=>[(28,28)]) 0 (avl::bin (90=>[(30,30)]) 1 (avl::bin (89=>[(31,31)]) 0 avl::nil avl::nil) avl::nil) (avl::bin (95=>[(29,29)]) (-1) avl::nil (avl::bin (96=>[(8,8)]) 0 avl::nil avl::nil))) (avl::bin (105=>[(15,15)]) 0 (avl::bin (101=>[(11,11)]) (-1) avl::nil (avl::bin (102=>[(10,10)]) 0 avl::nil avl::nil)) (avl::bin (106=>[(14,14)]) (-1) avl::nil (avl::bin (108=>[(12,12)]) 0 avl::nil avl::nil)))) (avl::bin (119=>[(5,5)]) (-1) (avl::bin (114=>[(6,6)]) 0 (avl::bin (113=>[(7,7)]) 0 avl::nil avl::nil) (avl::bin (116=>[(4,4)]) 0 avl::nil avl::nil)) (avl::bin (125=>[(3,3)]) 0 (avl::bin (123=>[(1,1)]) 1 (avl::bin (120=>[(0,0)]) 0 avl::nil avl::nil) avl::nil) (avl::bin (126=>[(2,2)]) (-1) avl::nil (avl::bin (129=>[(87,87)]) 0 avl::nil avl::nil))))))) (avl::bin (160=>[(72,72)]) 0 (avl::bin (144=>[(88,88)]) (-1) (avl::bin (139=>[(81,81)]) 0 (avl::bin (135=>[(85,85)]) 0 (avl::bin (132=>[(84,84)]) 0 avl::nil avl::nil) (avl::bin (136=>[(80,80)]) 0 avl::nil avl::nil)) (avl::bin (142=>[(82,82)]) 1 (avl::bin (141=>[(83,83)]) 0 avl::nil avl::nil) avl::nil)) (avl::bin (150=>[(90,90)]) (-1) (avl::bin (147=>[(89,89)]) (-1) avl::nil (avl::bin (149=>[(91,91)]) 0 avl::nil avl::nil)) (avl::bin (154=>[(94,94)]) (-1) (avl::bin (153=>[(95,95)]) 0 avl::nil avl::nil) (avl::bin (159=>[(93,93)]) 1 (avl::bin (156=>[(92,92)]) 0 avl::nil avl::nil) avl::nil)))) (avl::bin (175=>[(77,77)]) (-1) (avl::bin (169=>[(79,79)]) 0 (avl::bin (165=>[(75,75)]) 0 (avl::bin (163=>[(73,73)]) 0 avl::nil avl::nil) (avl::bin (166=>[(74,74)]) 0 avl::nil avl::nil)) (avl::bin (170=>[(78,78)]) (-1) avl::nil (avl::bin (172=>[(76,76)]) 0 avl::nil avl::nil))) (avl::bin (189=>[(67,67)]) 0 (avl::bin (180=>[(68,68)]) 0 (avl::bin (178=>[(70,70)]) 1 (avl::bin (177=>[(71,71)]) 0 avl::nil avl::nil) avl::nil) (avl::bin (184=>[(64,64)]) 0 (avl::bin (183=>[(69,69)]) 0 avl::nil avl::nil) (avl::bin (187=>[(65,65)]) 0 avl::nil avl::nil))) (avl::bin (219=>[(97,97)]) 0 (avl::bin (216=>[(96,96)]) 1 (avl::bin (190=>[(66,66)]) 0 avl::nil avl::nil) avl::nil) (avl::bin (221=>[(99,99)]) (-1) avl::nil (avl::bin (222=>[(98,98)]) 0 avl::nil avl::nil)))))))
f;
HBag (avl::bin (130=>[(86,86),(86,86),(86,86),(86,86),(86,86),(86,86),(86,86),(86,86),(86,86),(86,86),(86,86),(86,86),(86,86),(86,86),(86,86),(86,86),(86,86),(86,86),(86,86)]) 1 (avl::bin (65=>[(23,23),(23,23),(23,23),(23,23),(23,23),(23,23),(23,23),(23,23),(23,23),(23,23),(23,23),(23,23),(23,23)]) 0 (avl::bin (36=>[(52,52),(52,52),(52,52),(52,52),(52,52),(52,52),(52,52),(52,52),(52,52),(52,52),(52,52),(52,52),(52,52),(52,52),(52,52)]) 0 (avl::bin (12=>[(44,44),(44,44),(44,44),(44,44),(44,44),(44,44),(44,44),(44,44),(44,44),(44,44)]) (-1) (avl::bin (6=>[(42,42),(42,42),(42,42),(42,42),(42,42),(42,42),(42,42),(42,42),(42,42)]) 0 (avl::bin (3=>[(41,41),(41,41),(41,41),(41,41),(41,41),(41,41),(41,41),(41,41),(41,41),(41,41),(41,41),(41,41),(41,41),(41,41)]) 0 (avl::bin (0=>[(40,40),(40,40),(40,40),(40,40),(40,40),(40,40),(40,40),(40,40),(40,40),(40,40)]) 0 avl::nil avl::nil) (avl::bin (5=>[(43,43),(43,43),(43,43),(43,43),(43,43),(43,43),(43,43),(43,43),(43,43),(43,43),(43,43)]) 0 avl::nil avl::nil)) (avl::bin (9=>[(47,47),(47,47),(47,47),(47,47),(47,47),(47,47),(47,47),(47,47),(47,47),(47,47),(47,47),(47,47),(47,47)]) (-1) avl::nil (avl::bin (10=>[(46,46),(46,46),(46,46),(46,46),(46,46),(46,46),(46,46),(46,46),(46,46),(46,46),(46,46),(46,46)]) 0 avl::nil avl::nil))) (avl::bin (27=>[(33,33),(33,33),(33,33),(33,33),(33,33),(33,33)]) 0 (avl::bin (20=>[(36,36),(36,36),(36,36),(36,36),(36,36),(36,36),(36,36)]) 0 (avl::bin (17=>[(39,39),(39,39),(39,39),(39,39),(39,39),(39,39),(39,39),(39,39),(39,39),(39,39)]) 0 (avl::bin (15=>[(45,45),(45,45),(45,45),(45,45),(45,45),(45,45),(45,45),(45,45),(45,45),(45,45),(45,45)]) 0 avl::nil avl::nil) (avl::bin (18=>[(38,38),(38,38),(38,38),(38,38),(38,38),(38,38)]) 0 avl::nil avl::nil)) (avl::bin (23=>[(37,37),(37,37),(37,37),(37,37),(37,37),(37,37)]) (-1) avl::nil (avl::bin (24=>[(32,32),(32,32),(32,32),(32,32),(32,32)]) 0 avl::nil avl::nil))) (avl::bin (30=>[(34,34),(34,34),(34,34),(34,34),(34,34),(34,34),(34,34),(34,34)]) (-1) (avl::bin (29=>[(35,35),(35,35),(35,35),(35,35),(35,35),(35,35),(35,35),(35,35),(35,35),(35,35)]) 0 avl::nil avl::nil) (avl::bin (34=>[(54,54),(54,54),(54,54),(54,54),(54,54),(54,54),(54,54),(54,54),(54,54),(54,54),(54,54),(54,54)]) 1 (avl::bin (33=>[(55,55),(55,55),(55,55),(55,55),(55,55),(55,55),(55,55),(55,55),(55,55),(55,55),(55,55),(55,55)]) 0 avl::nil avl::nil) avl::nil)))) (avl::bin (46=>[(50,50),(50,50),(50,50),(50,50),(50,50),(50,50),(50,50),(50,50),(50,50),(50,50),(50,50),(50,50),(50,50),(50,50)]) (-1) (avl::bin (43=>[(49,49),(49,49),(49,49),(49,49),(49,49),(49,49)]) 1 (avl::bin (39=>[(53,53),(53,53),(53,53),(53,53),(53,53),(53,53),(53,53),(53,53),(53,53)]) (-1) avl::nil (avl::bin (40=>[(48,48),(48,48),(48,48),(48,48),(48,48),(48,48),(48,48),(48,48)]) 0 avl::nil avl::nil)) (avl::bin (45=>[(51,51),(51,51),(51,51),(51,51),(51,51),(51,51)]) 0 avl::nil avl::nil)) (avl::bin (54=>[(58,58),(58,58),(58,58),(58,58),(58,58),(58,58),(58,58),(58,58),(58,58),(58,58),(58,58),(58,58),(58,58)]) (-1) (avl::bin (51=>[(57,57),(57,57),(57,57),(57,57),(57,57),(57,57),(57,57),(57,57),(57,57),(57,57),(57,57),(57,57),(57,57),(57,57),(57,57),(57,57)]) 0 (avl::bin (48=>[(56,56),(56,56),(56,56),(56,56)]) 0 avl::nil avl::nil) (avl::bin (53=>[(59,59),(59,59),(59,59),(59,59),(59,59),(59,59),(59,59),(59,59),(59,59)]) 0 avl::nil avl::nil)) (avl::bin (60=>[(60,60),(60,60),(60,60),(60,60),(60,60),(60,60),(60,60),(60,60),(60,60),(60,60)]) 1 (avl::bin (57=>[(63,63),(63,63),(63,63),(63,63),(63,63),(63,63),(63,63)]) (-1) avl::nil (avl::bin (58=>[(62,62),(62,62),(62,62),(62,62),(62,62),(62,62)]) 0 avl::nil avl::nil)) (avl::bin (63=>[(61,61),(61,61),(61,61),(61,61),(61,61),(61,61),(61,61),(61,61),(61,61)]) 0 avl::nil avl::nil))))) (avl::bin (86=>[(26,26),(26,26),(26,26),(26,26),(26,26),(26,26),(26,26),(26,26),(26,26),(26,26),(26,26)]) (-1) (avl::bin (72=>[(16,16),(16,16),(16,16),(16,16),(16,16),(16,16),(16,16)]) (-1) (avl::bin (68=>[(20,20),(20,20),(20,20),(20,20),(20,20),(20,20),(20,20),(20,20),(20,20),(20,20),(20,20),(20,20)]) 0 (avl::bin (66=>[(22,22),(22,22),(22,22),(22,22)]) 0 avl::nil avl::nil) (avl::bin (71=>[(21,21),(21,21),(21,21),(21,21),(21,21),(21,21),(21,21),(21,21),(21,21),(21,21),(21,21),(21,21),(21,21),(21,21),(21,21),(21,21),(21,21)]) 0 avl::nil avl::nil)) (avl::bin (78=>[(18,18),(18,18),(18,18),(18,18),(18,18),(18,18),(18,18)]) 0 (avl::bin (77=>[(19,19),(19,19),(19,19),(19,19),(19,19),(19,19),(19,19),(19,19),(19,19)]) 1 (avl::bin (75=>[(17,17),(17,17),(17,17),(17,17),(17,17),(17,17),(17,17),(17,17),(17,17),(17,17)]) 0 avl::nil avl::nil) avl::nil) (avl::bin (83=>[(25,25),(25,25),(25,25),(25,25),(25,25),(25,25),(25,25),(25,25),(25,25),(25,25),(25,25)]) 0 (avl::bin (80=>[(24,24),(24,24),(24,24),(24,24),(24,24),(24,24),(24,24),(24,24)]) 0 avl::nil avl::nil) (avl::bin (85=>[(27,27),(27,27),(27,27),(27,27),(27,27),(27,27),(27,27)]) 0 avl::nil avl::nil)))) (avl::bin (111=>[(13,13),(13,13),(13,13),(13,13),(13,13),(13,13),(13,13),(13,13),(13,13),(13,13),(13,13)]) 0 (avl::bin (99=>[(9,9),(9,9),(9,9),(9,9),(9,9),(9,9),(9,9),(9,9),(9,9),(9,9),(9,9),(9,9),(9,9),(9,9),(9,9),(9,9),(9,9),(9,9)]) 0 (avl::bin (92=>[(28,28),(28,28),(28,28),(28,28),(28,28),(28,28),(28,28)]) 0 (avl::bin (90=>[(30,30),(30,30),(30,30),(30,30),(30,30),(30,30),(30,30),(30,30),(30,30),(30,30),(30,30),(30,30)]) 1 (avl::bin (89=>[(31,31),(31,31),(31,31),(31,31),(31,31),(31,31),(31,31),(31,31),(31,31),(31,31),(31,31),(31,31)]) 0 avl::nil avl::nil) avl::nil) (avl::bin (95=>[(29,29),(29,29),(29,29),(29,29),(29,29),(29,29),(29,29),(29,29),(29,29),(29,29),(29,29),(29,29)]) (-1) avl::nil (avl::bin (96=>[(8,8),(8,8),(8,8),(8,8),(8,8),(8,8),(8,8),(8,8)]) 0 avl::nil avl::nil))) (avl::bin (105=>[(15,15),(15,15),(15,15),(15,15),(15,15),(15,15),(15,15)]) 0 (avl::bin (101=>[(11,11),(11,11),(11,11),(11,11),(11,11),(11,11),(11,11)]) (-1) avl::nil (avl::bin (102=>[(10,10),(10,10),(10,10),(10,10),(10,10),(10,10),(10,10),(10,10),(10,10),(10,10),(10,10),(10,10),(10,10)]) 0 avl::nil avl::nil)) (avl::bin (106=>[(14,14),(14,14),(14,14),(14,14),(14,14),(14,14)]) (-1) avl::nil (avl::bin (108=>[(12,12),(12,12),(12,12),(12,12),(12,12),(12,12),(12,12),(12,12),(12,12)]) 0 avl::nil avl::nil)))) (avl::bin (119=>[(5,5),(5,5),(5,5),(5,5),(5,5),(5,5),(5,5),(5,5),(5,5),(5,5)]) (-1) (avl::bin (114=>[(6,6),(6,6),(6,6),(6,6),(6,6),(6,6),(6,6),(6,6),(6,6),(6,6),(6,6),(6,6),(6,6),(6,6)]) 0 (avl::bin (113=>[(7,7),(7,7),(7,7),(7,7),(7,7),(7,7),(7,7),(7,7),(7,7),(7,7)]) 0 avl::nil avl::nil) (avl::bin (116=>[(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4)]) 0 avl::nil avl::nil)) (avl::bin (125=>[(3,3),(3,3),(3,3),(3,3),(3,3),(3,3),(3,3),(3,3),(3,3),(3,3),(3,3),(3,3)]) 0 (avl::bin (123=>[(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)]) 1 (avl::bin (120=>[(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)]) 0 avl::nil avl::nil) avl::nil) (avl::bin (126=>[(2,2),(2,2),(2,2),(2,2),(2,2),(2,2),(2,2),(2,2),(2,2),(2,2),(2,2),(2,2),(2,2)]) (-1) avl::nil (avl::bin (129=>[(87,87),(87,87),(87,87),(87,87),(87,87),(87,87),(87,87),(87,87),(87,87),(87,87)]) 0 avl::nil avl::nil))))))) (avl::bin (160=>[(72,72),(72,72),(72,72),(72,72),(72,72),(72,72),(72,72),(72,72),(72,72),(72,72),(72,72),(72,72),(72,72),(72,72),(72,72),(72,72),(72,72),(72,72),(72,72),(72,72),(72,72)]) 0 (avl::bin (144=>[(88,88),(88,88),(88,88),(88,88),(88,88),(88,88),(88,88),(88,88)]) (-1) (avl::bin (139=>[(81,81),(81,81),(81,81),(81,81),(81,81),(81,81)]) 0 (avl::bin (135=>[(85,85),(85,85),(85,85),(85,85),(85,85),(85,85),(85,85),(85,85),(85,85),(85,85)]) 0 (avl::bin (132=>[(84,84),(84,84),(84,84),(84,84),(84,84),(84,84),(84,84),(84,84),(84,84),(84,84),(84,84)]) 0 avl::nil avl::nil) (avl::bin (136=>[(80,80),(80,80),(80,80),(80,80),(80,80),(80,80),(80,80),(80,80),(80,80),(80,80),(80,80),(80,80)]) 0 avl::nil avl::nil)) (avl::bin (142=>[(82,82),(82,82),(82,82),(82,82),(82,82),(82,82),(82,82),(82,82),(82,82),(82,82),(82,82)]) 1 (avl::bin (141=>[(83,83),(83,83),(83,83),(83,83),(83,83),(83,83),(83,83),(83,83)]) 0 avl::nil avl::nil) avl::nil)) (avl::bin (150=>[(90,90),(90,90),(90,90),(90,90),(90,90),(90,90),(90,90)]) (-1) (avl::bin (147=>[(89,89),(89,89),(89,89),(89,89),(89,89),(89,89),(89,89),(89,89),(89,89),(89,89),(89,89),(89,89),(89,89),(89,89),(89,89)]) (-1) avl::nil (avl::bin (149=>[(91,91),(91,91),(91,91),(91,91),(91,91),(91,91),(91,91),(91,91),(91,91),(91,91),(91,91),(91,91),(91,91),(91,91)]) 0 avl::nil avl::nil)) (avl::bin (154=>[(94,94),(94,94),(94,94),(94,94),(94,94),(94,94),(94,94),(94,94),(94,94),(94,94),(94,94)]) (-1) (avl::bin (153=>[(95,95),(95,95),(95,95),(95,95)]) 0 avl::nil avl::nil) (avl::bin (159=>[(93,93),(93,93),(93,93),(93,93),(93,93),(93,93),(93,93),(93,93)]) 1 (avl::bin (156=>[(92,92),(92,92),(92,92),(92,92),(92,92),(92,92),(92,92),(92,92),(92,92),(92,92),(92,92),(92,92)]) 0 avl::nil avl::nil) avl::nil)))) (avl::bin (175=>[(77,77),(77,77),(77,77),(77,77),(77,77),(77,77),(77,77),(77,77),(77,77),(77,77)]) (-1) (avl::bin (169=>[(79,79),(79,79),(79,79),(79,79),(79,79),(79,79),(79,79),(79,79),(79,79),(79,79)]) 0 (avl::bin (165=>[(75,75),(75,75),(75,75),(75,75),(75,75),(75,75),(75,75),(75,75),(75,75),(75,75),(75,75),(75,75)]) 0 (avl::bin (163=>[(73,73),(73,73),(73,73),(73,73),(73,73),(73,73),(73,73),(73,73)]) 0 avl::nil avl::nil) (avl::bin (166=>[(74,74),(74,74),(74,74),(74,74),(74,74),(74,74),(74,74),(74,74),(74,74),(74,74),(74,74)]) 0 avl::nil avl::nil)) (avl::bin (170=>[(78,78),(78,78),(78,78)]) (-1) avl::nil (avl::bin (172=>[(76,76),(76,76),(76,76),(76,76),(76,76),(76,76),(76,76),(76,76),(76,76),(76,76),(76,76),(76,76)]) 0 avl::nil avl::nil))) (avl::bin (189=>[(67,67),(67,67),(67,67),(67,67),(67,67),(67,67),(67,67)]) 0 (avl::bin (180=>[(68,68),(68,68),(68,68),(68,68),(68,68),(68,68),(68,68),(68,68),(68,68),(68,68),(68,68)]) 0 (avl::bin (178=>[(70,70),(70,70),(70,70),(70,70),(70,70),(70,70),(70,70),(70,70)]) 1 (avl::bin (177=>[(71,71),(71,71),(71,71),(71,71),(71,71),(71,71),(71,71),(71,71),(71,71)]) 0 avl::nil avl::nil) avl::nil) (avl::bin (184=>[(64,64),(64,64),(64,64),(64,64),(64,64),(64,64),(64,64),(64,64)]) 0 (avl::bin (183=>[(69,69),(69,69),(69,69),(69,69),(69,69),(69,69),(69,69),(69,69),(69,69),(69,69),(69,69),(69,69),(69,69)]) 0 avl::nil avl::nil) (avl::bin (187=>[(65,65),(65,65),(65,65),(65,65),(65,65),(65,65),(65,65),(65,65)]) 0 avl::nil avl::nil))) (avl::bin (219=>[(97,97),(97,97),(97,97),(97,97),(97,97),(97,97),(97,97)]) 0 (avl::bin (216=>[(96,96),(96,96),(96,96),(96,96),(96,96),(96,96),(96,96),(96,96),(96,96),(96,96),(96,96)]) 1 (avl::bin (190=>[(66,66),(66,66),(66,66),(66,66),(66,66),(66,66),(66,66),(66,66),(66,66),(66,66)]) 0 avl::nil avl::nil) avl::nil) (avl::bin (221=>[(99,99),(99,99),(99,99),(99,99),(99,99),(99,99),(99,99),(99,99),(99,99),(99,99),(99,99)]) (-1) avl::nil (avl::bin (222=>[(98,98),(98,98),(98,98),(98,98),(98,98)]) 0 avl::nil avl::nil)))))))
hsetp a;
1
hsetp c;
0
hbagp c;
1
hbagp a;
0
null emptyhset;
1
null emptyhbag;
1
null a;
0
null c;
0
rmfirst a;
HSet (avl::bin (71=>[(5,"5")]) (-1) (avl::bin (66=>[(6,"6")]) (-1) avl::nil (avl::bin (68=>[(4,"4")]) 0 avl::nil avl::nil)) (avl::bin (80=>[(8,"8")]) 0 (avl::bin (77=>[(3,"3")]) 0 (avl::bin (75=>[(1,"1")]) 0 avl::nil avl::nil) (avl::bin (78=>[(2,"2")]) 0 avl::nil avl::nil)) (avl::bin (83=>[(9,"9")]) (-1) avl::nil (avl::bin (812=>[(10,"10")]) 0 avl::nil avl::nil))))
rmfirst c;
HBag (avl::bin (71=>[(5,"5")]) (-1) (avl::bin (66=>[(6,"6")]) (-1) avl::nil (avl::bin (68=>[(4,"4")]) 0 avl::nil avl::nil)) (avl::bin (80=>[(8,"8")]) 0 (avl::bin (77=>[(3,"3")]) 0 (avl::bin (75=>[(1,"1")]) 0 avl::nil avl::nil) (avl::bin (78=>[(2,"2")]) 0 avl::nil avl::nil)) (avl::bin (83=>[(9,"9")]) (-1) avl::nil (avl::bin (812=>[(10,"10")]) 0 avl::nil avl::nil))))
rmlast a;
HSet (avl::bin (71=>[(5,"5")]) (-1) (avl::bin (66=>[(6,"6")]) 0 (avl::bin (65=>[(7,"7")]) 0 avl::nil avl::nil) (avl::bin (68=>[(4,"4")]) 0 avl::nil avl::nil)) (avl::bin (80=>[(8,"8")]) 1 (avl::bin (77=>[(3,"3")]) 0 (avl::bin (75=>[(1,"1")]) 0 avl::nil avl::nil) (avl::bin (78=>[(2,"2")]) 0 avl::nil avl::nil)) (avl::bin (83=>[(9,"9")]) 0 avl::nil avl::nil)))
rmlast c;
HBag (avl::bin (71=>[(5,"5")]) (-1) (avl::bin (66=>[(6,"6")]) 0 (avl::bin (65=>[(7,"7")]) 0 avl::nil avl::nil) (avl::bin (68=>[(4,"4")]) 0 avl::nil avl::nil)) (avl::bin (80=>[(8,"8")]) 1 (avl::bin (77=>[(3,"3")]) 0 (avl::bin (75=>[(1,"1")]) 0 avl::nil avl::nil) (avl::bin (78=>[(2,"2")]) 0 avl::nil avl::nil)) (avl::bin (83=>[(9,"9")]) 0 avl::nil avl::nil)))
foldl delete a (1..10);
HSet (avl::bin (71=>[(5,"5")]) (-1) (avl::bin (66=>[(6,"6")]) 0 (avl::bin (65=>[(7,"7")]) 0 avl::nil avl::nil) (avl::bin (68=>[(4,"4")]) 0 avl::nil avl::nil)) (avl::bin (80=>[(8,"8")]) 0 (avl::bin (77=>[(3,"3")]) 0 (avl::bin (75=>[(1,"1")]) 0 avl::nil avl::nil) (avl::bin (78=>[(2,"2")]) 0 avl::nil avl::nil)) (avl::bin (83=>[(9,"9")]) (-1) avl::nil (avl::bin (812=>[(10,"10")]) 0 avl::nil avl::nil))))
foldl delete c (1..10);
HBag (avl::bin (71=>[(5,"5")]) (-1) (avl::bin (66=>[(6,"6")]) 0 (avl::bin (65=>[(7,"7")]) 0 avl::nil avl::nil) (avl::bin (68=>[(4,"4")]) 0 avl::nil avl::nil)) (avl::bin (80=>[(8,"8")]) 0 (avl::bin (77=>[(3,"3")]) 0 (avl::bin (75=>[(1,"1")]) 0 avl::nil avl::nil) (avl::bin (78=>[(2,"2")]) 0 avl::nil avl::nil)) (avl::bin (83=>[(9,"9")]) (-1) avl::nil (avl::bin (812=>[(10,"10")]) 0 avl::nil avl::nil))))
first a;
7,"7"
last a;
10,"10"
first c;
7,"7"
last c;
10,"10"
#a;
10
#c;
10
#e;
100
#f;
1000
member a 5;
0
member a 50;
0
member c 5;
0
member c 50;
0
members a;
[(7,"7"),(6,"6"),(4,"4"),(5,"5"),(1,"1"),(3,"3"),(2,"2"),(8,"8"),(9,"9"),(10,"10")]
members c;
[(7,"7"),(6,"6"),(4,"4"),(5,"5"),(1,"1"),(3,"3"),(2,"2"),(8,"8"),(9,"9"),(10,"10")]
a==b;
0
a~=b;
1
a<b;
0
a<=b;
0
a>b;
1
a>=b;
1
a==a;
1
a~=a;
0
a<a;
0
a<=a;
1
a>a;
0
a>=a;
1
c==d;
0
c~=d;
1
c<d;
0
c<=d;
0
c>d;
1
c>=d;
1
c==c;
1
c~=c;
0
c<c;
0
c<=c;
1
c>c;
0
c>=c;
1
a+b;
HSet (avl::bin (71=>[(5,"5")]) (-1) (avl::bin (66=>[(6,"6")]) 0 (avl::bin (65=>[(7,"7")]) 0 avl::nil avl::nil) (avl::bin (68=>[(4,"4")]) 0 avl::nil avl::nil)) (avl::bin (80=>[(8,"8")]) 0 (avl::bin (77=>[(3,"3")]) 0 (avl::bin (75=>[(1,"1")]) 0 avl::nil avl::nil) (avl::bin (78=>[(2,"2")]) 0 avl::nil avl::nil)) (avl::bin (83=>[(9,"9")]) (-1) avl::nil (avl::bin (812=>[(10,"10")]) 0 avl::nil avl::nil))))
a*b;
HSet (avl::bin (80=>[(8,"8")]) 0 (avl::bin (66=>[(6,"6")]) 1 (avl::bin (65=>[(7,"7")]) 0 avl::nil avl::nil) avl::nil) (avl::bin (83=>[(9,"9")]) (-1) avl::nil (avl::bin (812=>[(10,"10")]) 0 avl::nil avl::nil)))
a-b;
HSet (avl::bin (77=>[(3,"3")]) 1 (avl::bin (71=>[(5,"5")]) 0 (avl::bin (68=>[(4,"4")]) 0 avl::nil avl::nil) (avl::bin (75=>[(1,"1")]) 0 avl::nil avl::nil)) (avl::bin (78=>[(2,"2")]) 0 avl::nil avl::nil))
c+d;
HBag (avl::bin (71=>[(5,"5")]) (-1) (avl::bin (66=>[(6,"6"),(6,"6")]) 0 (avl::bin (65=>[(7,"7"),(7,"7")]) 0 avl::nil avl::nil) (avl::bin (68=>[(4,"4")]) 0 avl::nil avl::nil)) (avl::bin (80=>[(8,"8"),(8,"8")]) 0 (avl::bin (77=>[(3,"3")]) 0 (avl::bin (75=>[(1,"1")]) 0 avl::nil avl::nil) (avl::bin (78=>[(2,"2")]) 0 avl::nil avl::nil)) (avl::bin (83=>[(9,"9"),(9,"9")]) (-1) avl::nil (avl::bin (812=>[(10,"10"),(10,"10")]) 0 avl::nil avl::nil))))
c*d;
HBag (avl::bin (80=>[(8,"8")]) 0 (avl::bin (66=>[(6,"6")]) 1 (avl::bin (65=>[(7,"7")]) 0 avl::nil avl::nil) avl::nil) (avl::bin (83=>[(9,"9")]) (-1) avl::nil (avl::bin (812=>[(10,"10")]) 0 avl::nil avl::nil)))
c-d;
HBag (avl::bin (77=>[(3,"3")]) 1 (avl::bin (71=>[(5,"5")]) 0 (avl::bin (68=>[(4,"4")]) 0 avl::nil avl::nil) (avl::bin (75=>[(1,"1")]) 0 avl::nil avl::nil)) (avl::bin (78=>[(2,"2")]) 0 avl::nil avl::nil))
c+d-d;
HBag (avl::bin (71=>[(5,"5")]) (-1) (avl::bin (66=>[(6,"6")]) 0 (avl::bin (65=>[(7,"7")]) 0 avl::nil avl::nil) (avl::bin (68=>[(4,"4")]) 0 avl::nil avl::nil)) (avl::bin (80=>[(8,"8")]) 0 (avl::bin (77=>[(3,"3")]) 0 (avl::bin (75=>[(1,"1")]) 0 avl::nil avl::nil) (avl::bin (78=>[(2,"2")]) 0 avl::nil avl::nil)) (avl::bin (83=>[(9,"9")]) (-1) avl::nil (avl::bin (812=>[(10,"10")]) 0 avl::nil avl::nil))))
foldl delete (foldl insert emptyhset r) r;
HSet avl::nil
foldl delete (foldl insert emptyhbag r) r;
HBag avl::nil
{
  rule #0: a = dict (listmap (\i -> i=>double i) (1..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let a = dict (listmap (\i/*0:1*/ -> i/*0:1*/=>double i/*0:1*/ {
  rule #0: _ i = i=>double i
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..10));
{
  rule #0: b = dict (listmap (\i -> i=>double i) (11..20))
  state 0: #0
	<var> state 1
  state 1: #0
}
let b = dict (listmap (\i/*0:1*/ -> i/*0:1*/=>double i/*0:1*/ {
  rule #0: _ i = i=>double i
  state 0: #0
	<var> state 1
  state 1: #0
}) (11..20));
{
  rule #0: c = hdict (zipwith (=>) (listmap (\i -> i,double i,str i) (1..10)) (1..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let c = hdict (zipwith (=>) (listmap (\i/*0:1*/ -> i/*0:1*/,double i/*0:1*/,str i/*0:1*/ {
  rule #0: _ i = i,double i,str i
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..10)) (1..10));
{
  rule #0: d = hdict (zipwith (=>) (listmap (\i -> i,double i,str i) (11..20)) (11..20))
  state 0: #0
	<var> state 1
  state 1: #0
}
let d = hdict (zipwith (=>) (listmap (\i/*0:1*/ -> i/*0:1*/,double i/*0:1*/,str i/*0:1*/ {
  rule #0: _ i = i,double i,str i
  state 0: #0
	<var> state 1
  state 1: #0
}) (11..20)) (11..20));
{
  rule #0: e = dict (zipwith (=>) (map str (1..10)) (map str (1..10)))
  state 0: #0
	<var> state 1
  state 1: #0
}
let e = dict (zipwith (=>) (map str (1..10)) (map str (1..10)));
{
  rule #0: f = dict (zipwith (=>) randlist randlist)
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = dict (zipwith (=>) randlist randlist);
{
  rule #0: g = hdict (zipwith (=>) (zip randlist randlist) randlist)
  state 0: #0
	<var> state 1
  state 1: #0
}
let g = hdict (zipwith (=>) (zip randlist randlist) randlist);
a;
Dict (avl::bin (4=>4.0) (-1) (avl::bin (2=>2.0) 0 (avl::bin (1=>1.0) 0 avl::nil avl::nil) (avl::bin (3=>3.0) 0 avl::nil avl::nil)) (avl::bin (8=>8.0) 0 (avl::bin (6=>6.0) 0 (avl::bin (5=>5.0) 0 avl::nil avl::nil) (avl::bin (7=>7.0) 0 avl::nil avl::nil)) (avl::bin (9=>9.0) (-1) avl::nil (avl::bin (10=>10.0) 0 avl::nil avl::nil))))
b;
Dict (avl::bin (14=>14.0) (-1) (avl::bin (12=>12.0) 0 (avl::bin (11=>11.0) 0 avl::nil avl::nil) (avl::bin (13=>13.0) 0 avl::nil avl::nil)) (avl::bin (18=>18.0) 0 (avl::bin (16=>16.0) 0 (avl::bin (15=>15.0) 0 avl::nil avl::nil) (avl::bin (17=>17.0) 0 avl::nil avl::nil)) (avl::bin (19=>19.0) (-1) avl::nil (avl::bin (20=>20.0) 0 avl::nil avl::nil))))
c;
HDict (avl::bin (38663=>[(5,5.0,"5")=>5]) (-1) (avl::bin (15365=>[(3,3.0,"3")=>3]) 0 (avl::bin (182=>[(2,2.0,"2")=>2]) 0 avl::nil avl::nil) (avl::bin (31196=>[(4,4.0,"4")=>4]) 0 avl::nil avl::nil)) (avl::bin (65863=>[(9,9.0,"9")=>9]) 0 (avl::bin (54481=>[(7,7.0,"7")=>7]) 0 (avl::bin (46762=>[(6,6.0,"6")=>6]) 0 avl::nil avl::nil) (avl::bin (62056=>[(8,8.0,"8")=>8]) 0 avl::nil avl::nil)) (avl::bin (466157=>[(1,1.0,"1")=>1]) 1 (avl::bin (70348=>[(10,10.0,"10")=>10]) 0 avl::nil avl::nil) avl::nil)))
d;
HDict (avl::bin (85520=>[(14,14.0,"14")=>14]) (-1) (avl::bin (76970=>[(12,12.0,"12")=>12]) 0 (avl::bin (74643=>[(11,11.0,"11")=>11]) 0 avl::nil avl::nil) (avl::bin (81221=>[(13,13.0,"13")=>13]) 0 avl::nil avl::nil)) (avl::bin (96416=>[(18,18.0,"18")=>18]) 0 (avl::bin (94150=>[(16,16.0,"16")=>16]) 0 (avl::bin (89903=>[(15,15.0,"15")=>15]) 0 avl::nil avl::nil) (avl::bin (94291=>[(17,17.0,"17")=>17]) 0 avl::nil avl::nil)) (avl::bin (98573=>[(19,19.0,"19")=>19]) (-1) avl::nil (avl::bin (100736=>[(20,20.0,"20")=>20]) 0 avl::nil avl::nil))))
e;
Dict (avl::bin ("4"=>"4") 0 (avl::bin ("2"=>"2") 1 (avl::bin ("1"=>"1") (-1) avl::nil (avl::bin ("10"=>"10") 0 avl::nil avl::nil)) (avl::bin ("3"=>"3") 0 avl::nil avl::nil)) (avl::bin ("6"=>"6") (-1) (avl::bin ("5"=>"5") 0 avl::nil avl::nil) (avl::bin ("8"=>"8") 0 (avl::bin ("7"=>"7") 0 avl::nil avl::nil) (avl::bin ("9"=>"9") 0 avl::nil avl::nil))))
mkdict 1000 (1..10);
Dict (avl::bin (4=>1000) (-1) (avl::bin (2=>1000) 0 (avl::bin (1=>1000) 0 avl::nil avl::nil) (avl::bin (3=>1000) 0 avl::nil avl::nil)) (avl::bin (8=>1000) 0 (avl::bin (6=>1000) 0 (avl::bin (5=>1000) 0 avl::nil avl::nil) (avl::bin (7=>1000) 0 avl::nil avl::nil)) (avl::bin (9=>1000) (-1) avl::nil (avl::bin (10=>1000) 0 avl::nil avl::nil))))
mkhdict 1000 (listmap (\i/*0:1*/ -> i/*0:1*/,double i/*0:1*/,str i/*0:1*/ {
  rule #0: _ i = i,double i,str i
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..10));
HDict (avl::bin (38663=>[(5,5.0,"5")=>1000]) (-1) (avl::bin (15365=>[(3,3.0,"3")=>1000]) 0 (avl::bin (182=>[(2,2.0,"2")=>1000]) 0 avl::nil avl::nil) (avl::bin (31196=>[(4,4.0,"4")=>1000]) 0 avl::nil avl::nil)) (avl::bin (65863=>[(9,9.0,"9")=>1000]) 0 (avl::bin (54481=>[(7,7.0,"7")=>1000]) 0 (avl::bin (46762=>[(6,6.0,"6")=>1000]) 0 avl::nil avl::nil) (avl::bin (62056=>[(8,8.0,"8")=>1000]) 0 avl::nil avl::nil)) (avl::bin (466157=>[(1,1.0,"1")=>1000]) 1 (avl::bin (70348=>[(10,10.0,"10")=>1000]) 0 avl::nil avl::nil) avl::nil)))
dictp a;
1
dictp c;
0
hdictp c;
1
hdictp a;
0
null emptydict;
1
null emptyhdict;
1
null a;
0
null c;
0
rmfirst a;
Dict (avl::bin (4=>4.0) (-1) (avl::bin (2=>2.0) (-1) avl::nil (avl::bin (3=>3.0) 0 avl::nil avl::nil)) (avl::bin (8=>8.0) 0 (avl::bin (6=>6.0) 0 (avl::bin (5=>5.0) 0 avl::nil avl::nil) (avl::bin (7=>7.0) 0 avl::nil avl::nil)) (avl::bin (9=>9.0) (-1) avl::nil (avl::bin (10=>10.0) 0 avl::nil avl::nil))))
rmlast a;
Dict (avl::bin (4=>4.0) (-1) (avl::bin (2=>2.0) 0 (avl::bin (1=>1.0) 0 avl::nil avl::nil) (avl::bin (3=>3.0) 0 avl::nil avl::nil)) (avl::bin (8=>8.0) 1 (avl::bin (6=>6.0) 0 (avl::bin (5=>5.0) 0 avl::nil avl::nil) (avl::bin (7=>7.0) 0 avl::nil avl::nil)) (avl::bin (9=>9.0) 0 avl::nil avl::nil)))
first a;
1=>1.0
last a;
10=>10.0
#a;
10
#c;
10
#f;
100
#g;
100
member a 5;
1
member a 50;
0
member e "5";
1
member e "50";
0
member c (5,5.0,"5");
1
member c (50,50.0,"50");
0
a!5;
5.0
e!"5";
"5"
c!(5,5.0,"5");
5
a!50;
<stdin>, line 248: unhandled exception 'out_of_bounds' while evaluating 'a!50'
c!(50,50.0,"50");
<stdin>, line 248: unhandled exception 'out_of_bounds' while evaluating 'c!(50,50.0,"50")'
subseq a 5 15;
[5.0,6.0,7.0,8.0,9.0,10.0]
c!!listmap (\i/*0:1*/ -> i/*0:1*/,double i/*0:1*/,str i/*0:1*/ {
  rule #0: _ i = i,double i,str i
  state 0: #0
	<var> state 1
  state 1: #0
}) (5..15);
[5,6,7,8,9,10]
members a;
[1=>1.0,2=>2.0,3=>3.0,4=>4.0,5=>5.0,6=>6.0,7=>7.0,8=>8.0,9=>9.0,10=>10.0]
members c;
[(2,2.0,"2")=>2,(3,3.0,"3")=>3,(4,4.0,"4")=>4,(5,5.0,"5")=>5,(6,6.0,"6")=>6,(7,7.0,"7")=>7,(8,8.0,"8")=>8,(9,9.0,"9")=>9,(10,10.0,"10")=>10,(1,1.0,"1")=>1]
keys a;
[1,2,3,4,5,6,7,8,9,10]
keys c;
[(2,2.0,"2"),(3,3.0,"3"),(4,4.0,"4"),(5,5.0,"5"),(6,6.0,"6"),(7,7.0,"7"),(8,8.0,"8"),(9,9.0,"9"),(10,10.0,"10"),(1,1.0,"1")]
vals a;
[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0]
vals c;
[2,3,4,5,6,7,8,9,10,1]
update a 5 5000;
Dict (avl::bin (4=>4.0) (-1) (avl::bin (2=>2.0) 0 (avl::bin (1=>1.0) 0 avl::nil avl::nil) (avl::bin (3=>3.0) 0 avl::nil avl::nil)) (avl::bin (8=>8.0) 0 (avl::bin (6=>6.0) 0 (avl::bin (5=>5000) 0 avl::nil avl::nil) (avl::bin (7=>7.0) 0 avl::nil avl::nil)) (avl::bin (9=>9.0) (-1) avl::nil (avl::bin (10=>10.0) 0 avl::nil avl::nil))))
update a 5000 5000;
Dict (avl::bin (4=>4.0) (-1) (avl::bin (2=>2.0) 0 (avl::bin (1=>1.0) 0 avl::nil avl::nil) (avl::bin (3=>3.0) 0 avl::nil avl::nil)) (avl::bin (8=>8.0) 0 (avl::bin (6=>6.0) 0 (avl::bin (5=>5.0) 0 avl::nil avl::nil) (avl::bin (7=>7.0) 0 avl::nil avl::nil)) (avl::bin (10=>10.0) 0 (avl::bin (9=>9.0) 0 avl::nil avl::nil) (avl::bin (5000=>5000) 0 avl::nil avl::nil))))
update c (5,5.0,"5") 5000;
HDict (avl::bin (38663=>[(5,5.0,"5")=>5000]) (-1) (avl::bin (15365=>[(3,3.0,"3")=>3]) 0 (avl::bin (182=>[(2,2.0,"2")=>2]) 0 avl::nil avl::nil) (avl::bin (31196=>[(4,4.0,"4")=>4]) 0 avl::nil avl::nil)) (avl::bin (65863=>[(9,9.0,"9")=>9]) 0 (avl::bin (54481=>[(7,7.0,"7")=>7]) 0 (avl::bin (46762=>[(6,6.0,"6")=>6]) 0 avl::nil avl::nil) (avl::bin (62056=>[(8,8.0,"8")=>8]) 0 avl::nil avl::nil)) (avl::bin (466157=>[(1,1.0,"1")=>1]) 1 (avl::bin (70348=>[(10,10.0,"10")=>10]) 0 avl::nil avl::nil) avl::nil)))
update c (5000,5000.0,"5000") 5000;
HDict (avl::bin (38663=>[(5,5.0,"5")=>5]) (-1) (avl::bin (15365=>[(3,3.0,"3")=>3]) 0 (avl::bin (182=>[(2,2.0,"2")=>2]) 0 avl::nil avl::nil) (avl::bin (31196=>[(4,4.0,"4")=>4]) 0 avl::nil avl::nil)) (avl::bin (65863=>[(9,9.0,"9")=>9]) 0 (avl::bin (54481=>[(7,7.0,"7")=>7]) 0 (avl::bin (46762=>[(6,6.0,"6")=>6]) 0 avl::nil avl::nil) (avl::bin (62056=>[(8,8.0,"8")=>8]) 0 avl::nil avl::nil)) (avl::bin (466157=>[(1,1.0,"1")=>1]) 0 (avl::bin (70348=>[(10,10.0,"10")=>10]) 0 avl::nil avl::nil) (avl::bin (256264466=>[(5000,5000.0,"5000")=>5000]) 0 avl::nil avl::nil))))
foldl delete a (1..10);
Dict avl::nil
delete a 5000;
Dict (avl::bin (4=>4.0) (-1) (avl::bin (2=>2.0) 0 (avl::bin (1=>1.0) 0 avl::nil avl::nil) (avl::bin (3=>3.0) 0 avl::nil avl::nil)) (avl::bin (8=>8.0) 0 (avl::bin (6=>6.0) 0 (avl::bin (5=>5.0) 0 avl::nil avl::nil) (avl::bin (7=>7.0) 0 avl::nil avl::nil)) (avl::bin (9=>9.0) (-1) avl::nil (avl::bin (10=>10.0) 0 avl::nil avl::nil))))
foldl delete c (listmap (\i/*0:1*/ -> i/*0:1*/,double i/*0:1*/,str i/*0:1*/ {
  rule #0: _ i = i,double i,str i
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..10));
HDict avl::nil
delete c (5000,5000.0,"5000");
HDict (avl::bin (38663=>[(5,5.0,"5")=>5]) (-1) (avl::bin (15365=>[(3,3.0,"3")=>3]) 0 (avl::bin (182=>[(2,2.0,"2")=>2]) 0 avl::nil avl::nil) (avl::bin (31196=>[(4,4.0,"4")=>4]) 0 avl::nil avl::nil)) (avl::bin (65863=>[(9,9.0,"9")=>9]) 0 (avl::bin (54481=>[(7,7.0,"7")=>7]) 0 (avl::bin (46762=>[(6,6.0,"6")=>6]) 0 avl::nil avl::nil) (avl::bin (62056=>[(8,8.0,"8")=>8]) 0 avl::nil avl::nil)) (avl::bin (466157=>[(1,1.0,"1")=>1]) 1 (avl::bin (70348=>[(10,10.0,"10")=>10]) 0 avl::nil avl::nil) avl::nil)))
a==b;
0
a~=b;
1
a==a;
1
a~=a;
0
c==d;
0
c~=d;
1
c==c;
1
c~=c;
0
foldl delete (mkdict 100 randlist) randlist;
Dict avl::nil
foldl delete (mkhdict 100 randlist) randlist;
HDict avl::nil
{
  rule #0: a = mdict (listmap (\i -> i=>double i) (1..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let a = mdict (listmap (\i/*0:1*/ -> i/*0:1*/=>double i/*0:1*/ {
  rule #0: _ i = i=>double i
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..10));
{
  rule #0: b = mdict (listmap (\i -> i=>double i) (11..20))
  state 0: #0
	<var> state 1
  state 1: #0
}
let b = mdict (listmap (\i/*0:1*/ -> i/*0:1*/=>double i/*0:1*/ {
  rule #0: _ i = i=>double i
  state 0: #0
	<var> state 1
  state 1: #0
}) (11..20));
{
  rule #0: c = hmdict (zipwith (=>) (listmap (\i -> i,double i,str i) (1..10)) (1..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let c = hmdict (zipwith (=>) (listmap (\i/*0:1*/ -> i/*0:1*/,double i/*0:1*/,str i/*0:1*/ {
  rule #0: _ i = i,double i,str i
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..10)) (1..10));
{
  rule #0: d = hmdict (zipwith (=>) (listmap (\i -> i,double i,str i) (11..20)) (11..20))
  state 0: #0
	<var> state 1
  state 1: #0
}
let d = hmdict (zipwith (=>) (listmap (\i/*0:1*/ -> i/*0:1*/,double i/*0:1*/,str i/*0:1*/ {
  rule #0: _ i = i,double i,str i
  state 0: #0
	<var> state 1
  state 1: #0
}) (11..20)) (11..20));
{
  rule #0: e = mdict (zipwith (=>) (map str (1..10)) (map str (1..10)))
  state 0: #0
	<var> state 1
  state 1: #0
}
let e = mdict (zipwith (=>) (map str (1..10)) (map str (1..10)));
{
  rule #0: f = mdict (zipwith (=>) randlist (1..#randlist))
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = mdict (zipwith (=>) randlist (1..#randlist));
{
  rule #0: g = hmdict (zipwith (=>) (zip randlist randlist) (1..#randlist))
  state 0: #0
	<var> state 1
  state 1: #0
}
let g = hmdict (zipwith (=>) (zip randlist randlist) (1..#randlist));
a;
MDict (avl::bin (4=>[4=>4.0]) (-1) (avl::bin (2=>[2=>2.0]) 0 (avl::bin (1=>[1=>1.0]) 0 avl::nil avl::nil) (avl::bin (3=>[3=>3.0]) 0 avl::nil avl::nil)) (avl::bin (8=>[8=>8.0]) 0 (avl::bin (6=>[6=>6.0]) 0 (avl::bin (5=>[5=>5.0]) 0 avl::nil avl::nil) (avl::bin (7=>[7=>7.0]) 0 avl::nil avl::nil)) (avl::bin (9=>[9=>9.0]) (-1) avl::nil (avl::bin (10=>[10=>10.0]) 0 avl::nil avl::nil))))
b;
MDict (avl::bin (14=>[14=>14.0]) (-1) (avl::bin (12=>[12=>12.0]) 0 (avl::bin (11=>[11=>11.0]) 0 avl::nil avl::nil) (avl::bin (13=>[13=>13.0]) 0 avl::nil avl::nil)) (avl::bin (18=>[18=>18.0]) 0 (avl::bin (16=>[16=>16.0]) 0 (avl::bin (15=>[15=>15.0]) 0 avl::nil avl::nil) (avl::bin (17=>[17=>17.0]) 0 avl::nil avl::nil)) (avl::bin (19=>[19=>19.0]) (-1) avl::nil (avl::bin (20=>[20=>20.0]) 0 avl::nil avl::nil))))
c;
HMDict (avl::bin (38663=>[(5,5.0,"5")=>5]) (-1) (avl::bin (15365=>[(3,3.0,"3")=>3]) 0 (avl::bin (182=>[(2,2.0,"2")=>2]) 0 avl::nil avl::nil) (avl::bin (31196=>[(4,4.0,"4")=>4]) 0 avl::nil avl::nil)) (avl::bin (65863=>[(9,9.0,"9")=>9]) 0 (avl::bin (54481=>[(7,7.0,"7")=>7]) 0 (avl::bin (46762=>[(6,6.0,"6")=>6]) 0 avl::nil avl::nil) (avl::bin (62056=>[(8,8.0,"8")=>8]) 0 avl::nil avl::nil)) (avl::bin (466157=>[(1,1.0,"1")=>1]) 1 (avl::bin (70348=>[(10,10.0,"10")=>10]) 0 avl::nil avl::nil) avl::nil)))
d;
HMDict (avl::bin (85520=>[(14,14.0,"14")=>14]) (-1) (avl::bin (76970=>[(12,12.0,"12")=>12]) 0 (avl::bin (74643=>[(11,11.0,"11")=>11]) 0 avl::nil avl::nil) (avl::bin (81221=>[(13,13.0,"13")=>13]) 0 avl::nil avl::nil)) (avl::bin (96416=>[(18,18.0,"18")=>18]) 0 (avl::bin (94150=>[(16,16.0,"16")=>16]) 0 (avl::bin (89903=>[(15,15.0,"15")=>15]) 0 avl::nil avl::nil) (avl::bin (94291=>[(17,17.0,"17")=>17]) 0 avl::nil avl::nil)) (avl::bin (98573=>[(19,19.0,"19")=>19]) (-1) avl::nil (avl::bin (100736=>[(20,20.0,"20")=>20]) 0 avl::nil avl::nil))))
e;
MDict (avl::bin ("4"=>["4"=>"4"]) 0 (avl::bin ("2"=>["2"=>"2"]) 1 (avl::bin ("1"=>["1"=>"1"]) (-1) avl::nil (avl::bin ("10"=>["10"=>"10"]) 0 avl::nil avl::nil)) (avl::bin ("3"=>["3"=>"3"]) 0 avl::nil avl::nil)) (avl::bin ("6"=>["6"=>"6"]) (-1) (avl::bin ("5"=>["5"=>"5"]) 0 avl::nil avl::nil) (avl::bin ("8"=>["8"=>"8"]) 0 (avl::bin ("7"=>["7"=>"7"]) 0 avl::nil avl::nil) (avl::bin ("9"=>["9"=>"9"]) 0 avl::nil avl::nil))))
mkmdict 1000 (1..10);
MDict (avl::bin (4=>[4=>1000]) (-1) (avl::bin (2=>[2=>1000]) 0 (avl::bin (1=>[1=>1000]) 0 avl::nil avl::nil) (avl::bin (3=>[3=>1000]) 0 avl::nil avl::nil)) (avl::bin (8=>[8=>1000]) 0 (avl::bin (6=>[6=>1000]) 0 (avl::bin (5=>[5=>1000]) 0 avl::nil avl::nil) (avl::bin (7=>[7=>1000]) 0 avl::nil avl::nil)) (avl::bin (9=>[9=>1000]) (-1) avl::nil (avl::bin (10=>[10=>1000]) 0 avl::nil avl::nil))))
mkhmdict 1000 (listmap (\i/*0:1*/ -> i/*0:1*/,double i/*0:1*/,str i/*0:1*/ {
  rule #0: _ i = i,double i,str i
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..10));
HMDict (avl::bin (38663=>[(5,5.0,"5")=>1000]) (-1) (avl::bin (15365=>[(3,3.0,"3")=>1000]) 0 (avl::bin (182=>[(2,2.0,"2")=>1000]) 0 avl::nil avl::nil) (avl::bin (31196=>[(4,4.0,"4")=>1000]) 0 avl::nil avl::nil)) (avl::bin (65863=>[(9,9.0,"9")=>1000]) 0 (avl::bin (54481=>[(7,7.0,"7")=>1000]) 0 (avl::bin (46762=>[(6,6.0,"6")=>1000]) 0 avl::nil avl::nil) (avl::bin (62056=>[(8,8.0,"8")=>1000]) 0 avl::nil avl::nil)) (avl::bin (466157=>[(1,1.0,"1")=>1000]) 1 (avl::bin (70348=>[(10,10.0,"10")=>1000]) 0 avl::nil avl::nil) avl::nil)))
mdictp a;
1
mdictp c;
0
hmdictp c;
1
hmdictp a;
0
null emptymdict;
1
null emptyhmdict;
1
null a;
0
null c;
0
rmfirst a;
MDict (avl::bin (4=>[4=>4.0]) (-1) (avl::bin (2=>[2=>2.0]) (-1) avl::nil (avl::bin (3=>[3=>3.0]) 0 avl::nil avl::nil)) (avl::bin (8=>[8=>8.0]) 0 (avl::bin (6=>[6=>6.0]) 0 (avl::bin (5=>[5=>5.0]) 0 avl::nil avl::nil) (avl::bin (7=>[7=>7.0]) 0 avl::nil avl::nil)) (avl::bin (9=>[9=>9.0]) (-1) avl::nil (avl::bin (10=>[10=>10.0]) 0 avl::nil avl::nil))))
rmlast a;
MDict (avl::bin (4=>[4=>4.0]) (-1) (avl::bin (2=>[2=>2.0]) 0 (avl::bin (1=>[1=>1.0]) 0 avl::nil avl::nil) (avl::bin (3=>[3=>3.0]) 0 avl::nil avl::nil)) (avl::bin (8=>[8=>8.0]) 1 (avl::bin (6=>[6=>6.0]) 0 (avl::bin (5=>[5=>5.0]) 0 avl::nil avl::nil) (avl::bin (7=>[7=>7.0]) 0 avl::nil avl::nil)) (avl::bin (9=>[9=>9.0]) 0 avl::nil avl::nil)))
first a;
1=>1.0
last a;
10=>10.0
#a;
10
#c;
10
#f;
1000
#g;
1000
member a 5;
1
member a 50;
0
member e "5";
1
member e "50";
0
member c (5,5.0,"5");
1
member c (50,50.0,"50");
0
a!5;
[5.0]
e!"5";
["5"]
c!(5,5.0,"5");
[5]
a!50;
[]
c!(50,50.0,"50");
[]
f!50;
[172,206,259,283,297,331,338,355,571,672,860,969,976,987]
g!(50,50);
[172,206,259,283,297,331,338,355,571,672,860,969,976,987]
subseq a 5 15;
[[5.0],[6.0],[7.0],[8.0],[9.0],[10.0],[],[],[],[],[]]
c!!listmap (\i/*0:1*/ -> i/*0:1*/,double i/*0:1*/,str i/*0:1*/ {
  rule #0: _ i = i,double i,str i
  state 0: #0
	<var> state 1
  state 1: #0
}) (5..15);
[[5],[6],[7],[8],[9],[10],[],[],[],[],[]]
members a;
[1=>1.0,2=>2.0,3=>3.0,4=>4.0,5=>5.0,6=>6.0,7=>7.0,8=>8.0,9=>9.0,10=>10.0]
members c;
[(2,2.0,"2")=>2,(3,3.0,"3")=>3,(4,4.0,"4")=>4,(5,5.0,"5")=>5,(6,6.0,"6")=>6,(7,7.0,"7")=>7,(8,8.0,"8")=>8,(9,9.0,"9")=>9,(10,10.0,"10")=>10,(1,1.0,"1")=>1]
keys a;
[1,2,3,4,5,6,7,8,9,10]
keys c;
[(2,2.0,"2"),(3,3.0,"3"),(4,4.0,"4"),(5,5.0,"5"),(6,6.0,"6"),(7,7.0,"7"),(8,8.0,"8"),(9,9.0,"9"),(10,10.0,"10"),(1,1.0,"1")]
vals a;
[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0]
vals c;
[2,3,4,5,6,7,8,9,10,1]
update a 5 5000;
MDict (avl::bin (4=>[4=>4.0]) (-1) (avl::bin (2=>[2=>2.0]) 0 (avl::bin (1=>[1=>1.0]) 0 avl::nil avl::nil) (avl::bin (3=>[3=>3.0]) 0 avl::nil avl::nil)) (avl::bin (8=>[8=>8.0]) 0 (avl::bin (6=>[6=>6.0]) 0 (avl::bin (5=>[5=>5.0,5=>5000]) 0 avl::nil avl::nil) (avl::bin (7=>[7=>7.0]) 0 avl::nil avl::nil)) (avl::bin (9=>[9=>9.0]) (-1) avl::nil (avl::bin (10=>[10=>10.0]) 0 avl::nil avl::nil))))
update a 5000 5000;
MDict (avl::bin (4=>[4=>4.0]) (-1) (avl::bin (2=>[2=>2.0]) 0 (avl::bin (1=>[1=>1.0]) 0 avl::nil avl::nil) (avl::bin (3=>[3=>3.0]) 0 avl::nil avl::nil)) (avl::bin (8=>[8=>8.0]) 0 (avl::bin (6=>[6=>6.0]) 0 (avl::bin (5=>[5=>5.0]) 0 avl::nil avl::nil) (avl::bin (7=>[7=>7.0]) 0 avl::nil avl::nil)) (avl::bin (10=>[10=>10.0]) 0 (avl::bin (9=>[9=>9.0]) 0 avl::nil avl::nil) (avl::bin (5000=>[5000=>5000]) 0 avl::nil avl::nil))))
update c (5,5.0,"5") 5000;
HMDict (avl::bin (38663=>[(5,5.0,"5")=>5,(5,5.0,"5")=>5000]) (-1) (avl::bin (15365=>[(3,3.0,"3")=>3]) 0 (avl::bin (182=>[(2,2.0,"2")=>2]) 0 avl::nil avl::nil) (avl::bin (31196=>[(4,4.0,"4")=>4]) 0 avl::nil avl::nil)) (avl::bin (65863=>[(9,9.0,"9")=>9]) 0 (avl::bin (54481=>[(7,7.0,"7")=>7]) 0 (avl::bin (46762=>[(6,6.0,"6")=>6]) 0 avl::nil avl::nil) (avl::bin (62056=>[(8,8.0,"8")=>8]) 0 avl::nil avl::nil)) (avl::bin (466157=>[(1,1.0,"1")=>1]) 1 (avl::bin (70348=>[(10,10.0,"10")=>10]) 0 avl::nil avl::nil) avl::nil)))
update c (5000,5000.0,"5000") 5000;
HMDict (avl::bin (38663=>[(5,5.0,"5")=>5]) (-1) (avl::bin (15365=>[(3,3.0,"3")=>3]) 0 (avl::bin (182=>[(2,2.0,"2")=>2]) 0 avl::nil avl::nil) (avl::bin (31196=>[(4,4.0,"4")=>4]) 0 avl::nil avl::nil)) (avl::bin (65863=>[(9,9.0,"9")=>9]) 0 (avl::bin (54481=>[(7,7.0,"7")=>7]) 0 (avl::bin (46762=>[(6,6.0,"6")=>6]) 0 avl::nil avl::nil) (avl::bin (62056=>[(8,8.0,"8")=>8]) 0 avl::nil avl::nil)) (avl::bin (466157=>[(1,1.0,"1")=>1]) 0 (avl::bin (70348=>[(10,10.0,"10")=>10]) 0 avl::nil avl::nil) (avl::bin (256264466=>[(5000,5000.0,"5000")=>5000]) 0 avl::nil avl::nil))))
update f 50 5000!50;
[172,206,259,283,297,331,338,355,571,672,860,969,976,987,5000]
update g (50,50) 5000!(50,50);
[172,206,259,283,297,331,338,355,571,672,860,969,976,987,5000]
foldl delete a (1..10);
MDict avl::nil
delete a 5000;
MDict (avl::bin (4=>[4=>4.0]) (-1) (avl::bin (2=>[2=>2.0]) 0 (avl::bin (1=>[1=>1.0]) 0 avl::nil avl::nil) (avl::bin (3=>[3=>3.0]) 0 avl::nil avl::nil)) (avl::bin (8=>[8=>8.0]) 0 (avl::bin (6=>[6=>6.0]) 0 (avl::bin (5=>[5=>5.0]) 0 avl::nil avl::nil) (avl::bin (7=>[7=>7.0]) 0 avl::nil avl::nil)) (avl::bin (9=>[9=>9.0]) (-1) avl::nil (avl::bin (10=>[10=>10.0]) 0 avl::nil avl::nil))))
foldl delete c (listmap (\i/*0:1*/ -> i/*0:1*/,double i/*0:1*/,str i/*0:1*/ {
  rule #0: _ i = i,double i,str i
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..10));
HMDict avl::nil
delete c (5000,5000.0,"5000");
HMDict (avl::bin (38663=>[(5,5.0,"5")=>5]) (-1) (avl::bin (15365=>[(3,3.0,"3")=>3]) 0 (avl::bin (182=>[(2,2.0,"2")=>2]) 0 avl::nil avl::nil) (avl::bin (31196=>[(4,4.0,"4")=>4]) 0 avl::nil avl::nil)) (avl::bin (65863=>[(9,9.0,"9")=>9]) 0 (avl::bin (54481=>[(7,7.0,"7")=>7]) 0 (avl::bin (46762=>[(6,6.0,"6")=>6]) 0 avl::nil avl::nil) (avl::bin (62056=>[(8,8.0,"8")=>8]) 0 avl::nil avl::nil)) (avl::bin (466157=>[(1,1.0,"1")=>1]) 1 (avl::bin (70348=>[(10,10.0,"10")=>10]) 0 avl::nil avl::nil) avl::nil)))
delete f 50!50;
[206,259,283,297,331,338,355,571,672,860,969,976,987]
delete g (50,50)!(50,50);
[206,259,283,297,331,338,355,571,672,860,969,976,987]
member (foldl delete f (repeatn (#f!50) 50)) 50;
0
member (foldl delete g (repeatn (#g!(50,50)) (50,50))) (50,50);
0
member (delete_all f 50) 50;
0
member (delete_all g (50,50)) (50,50);
0
a==b;
0
a~=b;
1
a==a;
1
a~=a;
0
c==d;
0
c~=d;
1
c==c;
1
c~=c;
0
foldl delete (mkmdict 100 randlist) randlist;
MDict avl::nil
foldl delete (mkhmdict 100 randlist) randlist;
HMDict avl::nil
{
  rule #0: a = heap (1..10)
  state 0: #0
	<var> state 1
  state 1: #0
}
let a = heap (1..10);
{
  rule #0: b = heap (11..20)
  state 0: #0
	<var> state 1
  state 1: #0
}
let b = heap (11..20);
{
  rule #0: c = heap (map str (1..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let c = heap (map str (1..10));
{
  rule #0: d = heap (1.0..10.0)
  state 0: #0
	<var> state 1
  state 1: #0
}
let d = heap (1.0..10.0);
a;
Heap (heap::bin 1 1 (heap::bin 0 2 (heap::bin 1 4 (heap::bin 0 8 heap::nil heap::nil) heap::nil) (heap::bin 1 6 (heap::bin 0 10 heap::nil heap::nil) heap::nil)) (heap::bin 1 3 (heap::bin 1 5 (heap::bin 0 9 heap::nil heap::nil) heap::nil) (heap::bin 0 7 heap::nil heap::nil)))
c;
Heap (heap::bin 1 "1" (heap::bin 0 "10" (heap::bin 1 "4" (heap::bin 0 "8" heap::nil heap::nil) heap::nil) (heap::bin 1 "2" (heap::bin 0 "6" heap::nil heap::nil) heap::nil)) (heap::bin 1 "3" (heap::bin 1 "5" (heap::bin 0 "9" heap::nil heap::nil) heap::nil) (heap::bin 0 "7" heap::nil heap::nil)))
d;
Heap (heap::bin 1 1.0 (heap::bin 0 2.0 (heap::bin 1 4.0 (heap::bin 0 8.0 heap::nil heap::nil) heap::nil) (heap::bin 1 6.0 (heap::bin 0 10.0 heap::nil heap::nil) heap::nil)) (heap::bin 1 3.0 (heap::bin 1 5.0 (heap::bin 0 9.0 heap::nil heap::nil) heap::nil) (heap::bin 0 7.0 heap::nil heap::nil)))
heapp a;
1
heapp (set (1..10));
0
null emptyheap;
1
null a;
0
rmfirst a;
Heap (heap::bin 0 2 (heap::bin 1 4 (heap::bin 1 8 (heap::bin 0 10 heap::nil heap::nil) heap::nil) (heap::bin 0 6 heap::nil heap::nil)) (heap::bin 1 3 (heap::bin 1 5 (heap::bin 0 9 heap::nil heap::nil) heap::nil) (heap::bin 0 7 heap::nil heap::nil)))
first a;
1
#a;
10
members a;
[1,2,3,4,5,6,7,8,9,10]
a==b;
0
a~=b;
1
a==a;
1
a~=a;
0
#heap randlist;
1000
{
  rule #0: a = array (1..10)
  state 0: #0
	<var> state 1
  state 1: #0
}
let a = array (1..10);
{
  rule #0: b = array (11..20)
  state 0: #0
	<var> state 1
  state 1: #0
}
let b = array (11..20);
{
  rule #0: c = array2 (listmap (\j -> listmap (\i -> str (i+j)) (j..10)) (1..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let c = array2 (listmap (\j/*0:1*/ -> listmap (\i/*0:1*/ -> str (i/*0:1*/+j/*1:1*/) {
  rule #0: _ i = str (i+j)
  state 0: #0
	<var> state 1
  state 1: #0
}) (j/*0:1*/..10) {
  rule #0: _ j = listmap (\i -> str (i+j)) (j..10)
  state 0: #0
	<var> state 1
  state 1: #0
}) (1..10));
{
  rule #0: d = array2 (listmap (\j -> listmap (\i -> str (i+j)) (j..10)) (11..20))
  state 0: #0
	<var> state 1
  state 1: #0
}
let d = array2 (listmap (\j/*0:1*/ -> listmap (\i/*0:1*/ -> str (i/*0:1*/+j/*1:1*/) {
  rule #0: _ i = str (i+j)
  state 0: #0
	<var> state 1
  state 1: #0
}) (j/*0:1*/..10) {
  rule #0: _ j = listmap (\i -> str (i+j)) (j..10)
  state 0: #0
	<var> state 1
  state 1: #0
}) (11..20));
a;
Array (array::bin 0 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip 1) (array::tip 9)) (array::tip 5)) (array::bin 0 (array::tip 3) (array::tip 7))) (array::bin 1 (array::bin 1 (array::bin 0 (array::tip 2) (array::tip 10)) (array::tip 6)) (array::bin 0 (array::tip 4) (array::tip 8))))
b;
Array (array::bin 0 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip 11) (array::tip 19)) (array::tip 15)) (array::bin 0 (array::tip 13) (array::tip 17))) (array::bin 1 (array::bin 1 (array::bin 0 (array::tip 12) (array::tip 20)) (array::tip 16)) (array::bin 0 (array::tip 14) (array::tip 18))))
c;
Array (array::bin 0 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip (Array (array::bin 0 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip "2") (array::tip "10")) (array::tip "6")) (array::bin 0 (array::tip "4") (array::tip "8"))) (array::bin 1 (array::bin 1 (array::bin 0 (array::tip "3") (array::tip "11")) (array::tip "7")) (array::bin 0 (array::tip "5") (array::tip "9")))))) (array::tip (Array (array::bin 0 (array::tip "18") (array::tip "19"))))) (array::tip (Array (array::bin 0 (array::bin 1 (array::bin 0 (array::tip "10") (array::tip "14")) (array::tip "12")) (array::bin 1 (array::bin 0 (array::tip "11") (array::tip "15")) (array::tip "13")))))) (array::bin 0 (array::tip (Array (array::bin 0 (array::bin 0 (array::bin 0 (array::tip "6") (array::tip "10")) (array::bin 0 (array::tip "8") (array::tip "12"))) (array::bin 0 (array::bin 0 (array::tip "7") (array::tip "11")) (array::bin 0 (array::tip "9") (array::tip "13")))))) (array::tip (Array (array::bin 0 (array::bin 0 (array::tip "14") (array::tip "16")) (array::bin 0 (array::tip "15") (array::tip "17"))))))) (array::bin 1 (array::bin 1 (array::bin 0 (array::tip (Array (array::bin 1 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip "4") (array::tip "12")) (array::tip "8")) (array::bin 0 (array::tip "6") (array::tip "10"))) (array::bin 0 (array::bin 0 (array::tip "5") (array::tip "9")) (array::bin 0 (array::tip "7") (array::tip "11")))))) (array::tip (Array (array::tip "20")))) (array::tip (Array (array::bin 1 (array::bin 1 (array::bin 0 (array::tip "12") (array::tip "16")) (array::tip "14")) (array::bin 0 (array::tip "13") (array::tip "15")))))) (array::bin 0 (array::tip (Array (array::bin 1 (array::bin 0 (array::bin 0 (array::tip "8") (array::tip "12")) (array::bin 0 (array::tip "10") (array::tip "14"))) (array::bin 1 (array::bin 0 (array::tip "9") (array::tip "13")) (array::tip "11"))))) (array::tip (Array (array::bin 1 (array::bin 0 (array::tip "16") (array::tip "18")) (array::tip "17")))))))
d;
Array (array::bin 0 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip (Array array::nil)) (array::tip (Array array::nil))) (array::tip (Array array::nil))) (array::bin 0 (array::tip (Array array::nil)) (array::tip (Array array::nil)))) (array::bin 1 (array::bin 1 (array::bin 0 (array::tip (Array array::nil)) (array::tip (Array array::nil))) (array::tip (Array array::nil))) (array::bin 0 (array::tip (Array array::nil)) (array::tip (Array array::nil)))))
mkarray 1000 10;
Array (array::bin 0 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip 1000) (array::tip 1000)) (array::tip 1000)) (array::bin 0 (array::tip 1000) (array::tip 1000))) (array::bin 1 (array::bin 1 (array::bin 0 (array::tip 1000) (array::tip 1000)) (array::tip 1000)) (array::bin 0 (array::tip 1000) (array::tip 1000))))
mkarray2 1000 (5,5);
Array (array::bin 1 (array::bin 1 (array::bin 0 (array::tip (Array (array::bin 1 (array::bin 1 (array::bin 0 (array::tip 1000) (array::tip 1000)) (array::tip 1000)) (array::bin 0 (array::tip 1000) (array::tip 1000))))) (array::tip (Array (array::bin 1 (array::bin 1 (array::bin 0 (array::tip 1000) (array::tip 1000)) (array::tip 1000)) (array::bin 0 (array::tip 1000) (array::tip 1000)))))) (array::tip (Array (array::bin 1 (array::bin 1 (array::bin 0 (array::tip 1000) (array::tip 1000)) (array::tip 1000)) (array::bin 0 (array::tip 1000) (array::tip 1000)))))) (array::bin 0 (array::tip (Array (array::bin 1 (array::bin 1 (array::bin 0 (array::tip 1000) (array::tip 1000)) (array::tip 1000)) (array::bin 0 (array::tip 1000) (array::tip 1000))))) (array::tip (Array (array::bin 1 (array::bin 1 (array::bin 0 (array::tip 1000) (array::tip 1000)) (array::tip 1000)) (array::bin 0 (array::tip 1000) (array::tip 1000)))))))
arrayp a;
1
arrayp c;
1
arrayp (set (1..2));
0
null emptyarray;
1
null a;
0
null c;
0
rmfirst a;
Array (array::bin 1 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip 2) (array::tip 10)) (array::tip 6)) (array::bin 0 (array::tip 4) (array::tip 8))) (array::bin 0 (array::bin 0 (array::tip 3) (array::tip 7)) (array::bin 0 (array::tip 5) (array::tip 9))))
rmlast a;
Array (array::bin 1 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip 1) (array::tip 9)) (array::tip 5)) (array::bin 0 (array::tip 3) (array::tip 7))) (array::bin 0 (array::bin 0 (array::tip 2) (array::tip 6)) (array::bin 0 (array::tip 4) (array::tip 8))))
rmfirst a;
Array (array::bin 1 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip 2) (array::tip 10)) (array::tip 6)) (array::bin 0 (array::tip 4) (array::tip 8))) (array::bin 0 (array::bin 0 (array::tip 3) (array::tip 7)) (array::bin 0 (array::tip 5) (array::tip 9))))
rmfirst c;
Array (array::bin 1 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip (Array (array::bin 1 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip "4") (array::tip "12")) (array::tip "8")) (array::bin 0 (array::tip "6") (array::tip "10"))) (array::bin 0 (array::bin 0 (array::tip "5") (array::tip "9")) (array::bin 0 (array::tip "7") (array::tip "11")))))) (array::tip (Array (array::tip "20")))) (array::tip (Array (array::bin 1 (array::bin 1 (array::bin 0 (array::tip "12") (array::tip "16")) (array::tip "14")) (array::bin 0 (array::tip "13") (array::tip "15")))))) (array::bin 0 (array::tip (Array (array::bin 1 (array::bin 0 (array::bin 0 (array::tip "8") (array::tip "12")) (array::bin 0 (array::tip "10") (array::tip "14"))) (array::bin 1 (array::bin 0 (array::tip "9") (array::tip "13")) (array::tip "11"))))) (array::tip (Array (array::bin 1 (array::bin 0 (array::tip "16") (array::tip "18")) (array::tip "17")))))) (array::bin 0 (array::bin 0 (array::tip (Array (array::bin 0 (array::bin 0 (array::bin 0 (array::tip "6") (array::tip "10")) (array::bin 0 (array::tip "8") (array::tip "12"))) (array::bin 0 (array::bin 0 (array::tip "7") (array::tip "11")) (array::bin 0 (array::tip "9") (array::tip "13")))))) (array::tip (Array (array::bin 0 (array::bin 0 (array::tip "14") (array::tip "16")) (array::bin 0 (array::tip "15") (array::tip "17")))))) (array::bin 0 (array::tip (Array (array::bin 0 (array::bin 1 (array::bin 0 (array::tip "10") (array::tip "14")) (array::tip "12")) (array::bin 1 (array::bin 0 (array::tip "11") (array::tip "15")) (array::tip "13"))))) (array::tip (Array (array::bin 0 (array::tip "18") (array::tip "19")))))))
first a;
1
last a;
10
first c;
Array (array::bin 0 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip "2") (array::tip "10")) (array::tip "6")) (array::bin 0 (array::tip "4") (array::tip "8"))) (array::bin 1 (array::bin 1 (array::bin 0 (array::tip "3") (array::tip "11")) (array::tip "7")) (array::bin 0 (array::tip "5") (array::tip "9"))))
last c;
Array (array::tip "20")
#a;
10
#c;
10
a!5;
6
c!(2,3);
"9"
a!50;
<stdin>, line 484: unhandled exception 'out_of_bounds' while evaluating 'a!50'
c!(20,30);
<stdin>, line 484: unhandled exception 'out_of_bounds' while evaluating 'c!(20,30)'
subseq a 5 15;
[6,7,8,9,10]
c!!catmap (\i/*0:1*/ -> listmap (\j/*0:1*/ -> i/*1:1*/,j/*0:1*/ {
  rule #0: _ j = i,j
  state 0: #0
	<var> state 1
  state 1: #0
}) (3..15) {
  rule #0: _ i = listmap (\j -> i,j) (3..15)
  state 0: #0
	<var> state 1
  state 1: #0
}) (3..15);
["11","12","13","14","13","14","15","15","16","17"]
members a;
[1,2,3,4,5,6,7,8,9,10]
members c;
[Array (array::bin 0 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip "2") (array::tip "10")) (array::tip "6")) (array::bin 0 (array::tip "4") (array::tip "8"))) (array::bin 1 (array::bin 1 (array::bin 0 (array::tip "3") (array::tip "11")) (array::tip "7")) (array::bin 0 (array::tip "5") (array::tip "9")))),Array (array::bin 1 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip "4") (array::tip "12")) (array::tip "8")) (array::bin 0 (array::tip "6") (array::tip "10"))) (array::bin 0 (array::bin 0 (array::tip "5") (array::tip "9")) (array::bin 0 (array::tip "7") (array::tip "11")))),Array (array::bin 0 (array::bin 0 (array::bin 0 (array::tip "6") (array::tip "10")) (array::bin 0 (array::tip "8") (array::tip "12"))) (array::bin 0 (array::bin 0 (array::tip "7") (array::tip "11")) (array::bin 0 (array::tip "9") (array::tip "13")))),Array (array::bin 1 (array::bin 0 (array::bin 0 (array::tip "8") (array::tip "12")) (array::bin 0 (array::tip "10") (array::tip "14"))) (array::bin 1 (array::bin 0 (array::tip "9") (array::tip "13")) (array::tip "11"))),Array (array::bin 0 (array::bin 1 (array::bin 0 (array::tip "10") (array::tip "14")) (array::tip "12")) (array::bin 1 (array::bin 0 (array::tip "11") (array::tip "15")) (array::tip "13"))),Array (array::bin 1 (array::bin 1 (array::bin 0 (array::tip "12") (array::tip "16")) (array::tip "14")) (array::bin 0 (array::tip "13") (array::tip "15"))),Array (array::bin 0 (array::bin 0 (array::tip "14") (array::tip "16")) (array::bin 0 (array::tip "15") (array::tip "17"))),Array (array::bin 1 (array::bin 0 (array::tip "16") (array::tip "18")) (array::tip "17")),Array (array::bin 0 (array::tip "18") (array::tip "19")),Array (array::tip "20")]
members2 c;
[["2","3","4","5","6","7","8","9","10","11"],["4","5","6","7","8","9","10","11","12"],["6","7","8","9","10","11","12","13"],["8","9","10","11","12","13","14"],["10","11","12","13","14","15"],["12","13","14","15","16"],["14","15","16","17"],["16","17","18"],["18","19"],["20"]]
update a 5 5000;
Array (array::bin 0 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip 1) (array::tip 9)) (array::tip 5)) (array::bin 0 (array::tip 3) (array::tip 7))) (array::bin 1 (array::bin 1 (array::bin 0 (array::tip 2) (array::tip 10)) (array::tip 5000)) (array::bin 0 (array::tip 4) (array::tip 8))))
update2 c (2,3) "5000";
Array (array::bin 0 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip (Array (array::bin 0 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip "2") (array::tip "10")) (array::tip "6")) (array::bin 0 (array::tip "4") (array::tip "8"))) (array::bin 1 (array::bin 1 (array::bin 0 (array::tip "3") (array::tip "11")) (array::tip "7")) (array::bin 0 (array::tip "5") (array::tip "9")))))) (array::tip (Array (array::bin 0 (array::tip "18") (array::tip "19"))))) (array::tip (Array (array::bin 0 (array::bin 1 (array::bin 0 (array::tip "10") (array::tip "14")) (array::tip "12")) (array::bin 1 (array::bin 0 (array::tip "11") (array::tip "15")) (array::tip "13")))))) (array::bin 0 (array::tip (Array (array::bin 0 (array::bin 0 (array::bin 0 (array::tip "6") (array::tip "10")) (array::bin 0 (array::tip "8") (array::tip "12"))) (array::bin 0 (array::bin 0 (array::tip "7") (array::tip "11")) (array::bin 0 (array::tip "5000") (array::tip "13")))))) (array::tip (Array (array::bin 0 (array::bin 0 (array::tip "14") (array::tip "16")) (array::bin 0 (array::tip "15") (array::tip "17"))))))) (array::bin 1 (array::bin 1 (array::bin 0 (array::tip (Array (array::bin 1 (array::bin 1 (array::bin 1 (array::bin 0 (array::tip "4") (array::tip "12")) (array::tip "8")) (array::bin 0 (array::tip "6") (array::tip "10"))) (array::bin 0 (array::bin 0 (array::tip "5") (array::tip "9")) (array::bin 0 (array::tip "7") (array::tip "11")))))) (array::tip (Array (array::tip "20")))) (array::tip (Array (array::bin 1 (array::bin 1 (array::bin 0 (array::tip "12") (array::tip "16")) (array::tip "14")) (array::bin 0 (array::tip "13") (array::tip "15")))))) (array::bin 0 (array::tip (Array (array::bin 1 (array::bin 0 (array::bin 0 (array::tip "8") (array::tip "12")) (array::bin 0 (array::tip "10") (array::tip "14"))) (array::bin 1 (array::bin 0 (array::tip "9") (array::tip "13")) (array::tip "11"))))) (array::tip (Array (array::bin 1 (array::bin 0 (array::tip "16") (array::tip "18")) (array::tip "17")))))))
insert a 5000;
Array (array::bin 1 (array::bin 0 (array::bin 1 (array::bin 0 (array::tip 5000) (array::tip 8)) (array::tip 4)) (array::bin 1 (array::bin 0 (array::tip 2) (array::tip 10)) (array::tip 6))) (array::bin 1 (array::bin 1 (array::bin 0 (array::tip 1) (array::tip 9)) (array::tip 5)) (array::bin 0 (array::tip 3) (array::tip 7))))
append a 5000;
Array (array::bin 1 (array::bin 0 (array::bin 1 (array::bin 0 (array::tip 1) (array::tip 9)) (array::tip 5)) (array::bin 1 (array::bin 0 (array::tip 3) (array::tip 5000)) (array::tip 7))) (array::bin 1 (array::bin 1 (array::bin 0 (array::tip 2) (array::tip 10)) (array::tip 6)) (array::bin 0 (array::tip 4) (array::tip 8))))
a==b;
0
a~=b;
1
a==a;
1
a~=a;
0
c==d;
0
c~=d;
1
c==c;
1
c~=c;
0
